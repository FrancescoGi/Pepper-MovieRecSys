<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="59.4604"><Box name="Set Language" id="2" localization="8" tooltip="Set the language of your robot for the current application. Your robot will speak and understand the selected language as long as your application has focus. Any following call to ALSpeechRecognition (Speech Reco. box for instance), ALTextToSpeech (Say box for instance) or ALDialog will use this language.&#x0A;" x="72" y="111"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Add Modules" id="1" localization="8" tooltip="" x="192" y="114"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[import sys,os

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.framemanager = ALProxy("ALFrameManager")
        except:
            self.logger.warn("ALFrameManager is not available")

    def onLoad(self):
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #Importare moduli nel progetto
        folderName = "/data/home/nao/.local/share/PackageManager/apps/movierecsyslib-0fb8f5/behavior_1/lib"
        if folderName not in sys.path:
            sys.path.append(folderName)
        print(sys.path)

        folderName = os.path.join(self.behaviorAbsolutePath(), '../')
        if folderName not in sys.path:
            sys.path.append(folderName)
        print(sys.path)
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Request" id="4" localization="8" tooltip="" x="1506" y="265"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")
        self.tts = ALProxy('ALTextToSpeech')
        self.memory = ALProxy("ALMemory")

        try:
            self.framemanager = ALProxy("ALFrameManager")
        except:
            self.logger.warn("ALFrameManager is not available")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, text):
        import getReply
        import getAuxReply
        from modules.generate_html import choose_html
        from modules.generate_id import generate_message_id

        try:
            message_id = generate_message_id()
            self.output_scratch()
            user=self.memory.getData('movierecsys_user_id')
            self.logger.info(user)
            r = getReply.getReply(user, message_id, text, 'pepper', 'movierecsysbot')
            self.output_endscratch()

        except:
            self.tts.say('\\rspd=80\\'+str('Error!'))

        fileName = os.path.join(self.behaviorAbsolutePath(), '../')
        fileName = fileName+'html/index.html'

        if 'auxAPI' in r:
            auxAPI = r["auxAPI"]
            self.tts.say('\\rspd=80\\'+str('Let me think!'))
            self.output_scratch()
            r = getAuxReply.getAuxReply(auxAPI)
            self.output_endscratch()
            msgs = r["messages"]
            html,id, say = choose_html(r,fileName)
        else:
            msgs = r["messages"]
            #message_id = utility.generate_message_id_cont('Pepper', folderName)
            html,id, say = choose_html(r,fileName)

        if (html != 0):
            if( html == 1):
                # set the local configuration
                configuration = {"bodyLanguageMode":"contextual"}

                # say the text with the local configuration
                self.animatedSpeechProxy.say('\\rspd=80\\'+str(say), configuration)
                self.output_alternatives(id)
            elif(html == 2):
                self.output_suggestion([id,str(say)])
            elif(html == 3):
                # set the local configuration
                configuration = {"bodyLanguageMode":"contextual"}

                # say the text with the local configuration
                self.animatedSpeechProxy.say('\\rspd=80\\'+str(say), configuration)
                self.output_trailer(id)
            elif(html == 4):
                # set the local configuration
                configuration = {"bodyLanguageMode":"contextual"}

                # say the text with the local configuration
                self.animatedSpeechProxy.say('\\rspd=80\\'+str(say), configuration)
                self.output_profile(id)
        else:
            for msg in msgs:
                # set the local configuration
                configuration = {"bodyLanguageMode":"contextual"}

                # say the text with the local configuration
                self.animatedSpeechProxy.say('\\rspd=80\\'+str(msg["text"]), configuration)
                #self.tts.say('\\rspd=80\\'+str(msg["text"]))
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="output_alternatives" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="output_suggestion" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="output_trailer" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="output_scratch" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" /><Output name="output_endscratch" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" /><Output name="output_profile" type="3" type_size="1" nature="2" inner="0" tooltip="" id="10" /></Box><Box name="Recognize Request" id="5" localization="8" tooltip="" x="1838" y="32"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.framemanager = ALProxy("ALFrameManager")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, audio_path):
        #from modules.f_speech_recognition.speech_recognition_standard import speech_recognition
        from modules.f_speech_recognition.speech_recognition_GC import speech_recognition

        fileName = os.path.join(self.behaviorAbsolutePath(), '../')

        credentials_path = fileName+'credentials/credentials.json'


        text=speech_recognition(audio_path,credentials_path)
        if text == "-1":
            self.tts.say('\\rspd=80\\'+str("I don't understand. Can you repeat it, please?"))
            self.output_repeat()

        #text = 'stop'
        self.onStopped(str(text)) #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="output_repeat" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Create SignUp" id="7" localization="8" tooltip="" x="821" y="26"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        from modules.generate_html import html_signup

        fileName = os.path.join(self.behaviorAbsolutePath(), '../')
        fileName = fileName+'html/index.html'

        say, id = html_signup(fileName)

        # set the local configuration
        configuration = {"bodyLanguageMode":"contextual"}

        # say the text with the local configuration
        self.animatedSpeechProxy.say('\\rspd=80\\'+str(say), configuration)

        self.onStopped(id)

        #self.onStopped('/start') #activate the output of the box
        #self.onStopped("I like Matrix.")             #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Catch Exit" id="8" localization="8" tooltip="" x="1981" y="83"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")

    def onInput_onStart(self, p):
        if(p == "Exit" or p == "exit"):
            # set the local configuration
            configuration = {"bodyLanguageMode":"contextual"}

            # say the text with the local configuration
            self.animatedSpeechProxy.say('\\rspd=80\\'+str("bye bye!"), configuration)
            self.output_1()
        else:
            self.onStopped(p) #activate the output of the box(p)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="output_1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Show App Disambiguation" id="6" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="1517" y="765"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            self.memory = ALProxy("ALMemory")
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self, id):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = ".lastUploadedChoregrapheBehavior"
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True

                    def callback(x,y):
                        time.sleep(2)
                        try:
                            if self.isRunning:
                                a=self.memory.getData(id)

                                self.logger.info(a)
                                self.memory.removeData(id)
                                tabletService.hideWebview()
                                self.onUnload()
                                self.onSuccess(a)
                            else:
                                self.logger.info('Close')

                        except Exception as e:
                            self.logger.info('Null value!')

                    # attach the callback function to onJSEvent signal
                    tabletService.onTouchDown.connect(callback)

                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            print('Success')
        else:
            self.onFailure(id)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Box name="Say Choice Disambiguation" id="9" localization="8" tooltip="" x="1666" y="763"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        # set the local configuration
        configuration = {"bodyLanguageMode":"contextual"}

        # say the text with the local configuration
        self.animatedSpeechProxy.say('\\rspd=80\\'+str(p), configuration)
        self.onStopped(str(p))

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Record Request" id="10" localization="8" tooltip='Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head microphones) in wav format.&#x0A;&#x0A;If &quot;Temporary storage&quot; isn&apos;t checked, the output sound file is located in &quot;~/recordings/microphones/&lt;File name&gt;&quot;.&#x0A;Else, it is located in a temporary directory&#x0A;&#x0A;The onStopped output is stimulated at the end of the recording and contains the absolute path to the output sound file&#x0A;&#x0A;V1.1.0&#x0A;' x="1760" y="134"><bitmap>media/images/box/interaction/rec_sound.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="3" value="recording" default_value="recording" custom_choice="0" tooltip="Name of the destination file without its extension." id="5" /><Parameter name="Microphones used" inherits_from_parent="0" content_type="3" value="Front head microphone only (.ogg)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="6"><Choice value="Front head microphone only (.ogg)" /><Choice value="Front, sides and rear head microphones (.wav)" /></Parameter><Parameter name="Temporary storage" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is disabled the file is stored in ~/recordings/microphones. You can&#x0A;then get it on your computer using the menu Connection/File transfer.&#x0A;&#x0A;When this option is enabled the file is stored in the temporary folder of the behavior." id="7" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="5" min="0.1" max="60" tooltip="Duration of the recording in seconds." id="8" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Rec. Sound File" id="4" localization="8" tooltip="Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head&#x0A;microphones) in wav format." x="562" y="100"><bitmap>media/images/box/interaction/rec_sound.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.ad = ALProxy("ALAudioDevice")
        except Exception as e:
            self.ad = None
            self.logger.error(e)
        self.filepath = ""

    def onLoad(self):
        self.bIsRecording = False
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False
        if( self.bIsRecording ):
            self.ad.stopMicrophonesRecording()
            self.bIsRecording = False

    def onInput_onStart(self, p):
        if(self.bIsRunning):
            return
        self.bIsRunning = True
        sExtension = self.toExtension( self.getParameter("Microphones used") )
        self.filepath = p + sExtension
        if self.ad:
            self.ad.startMicrophonesRecording( self.filepath )
            self.bIsRecording = True
        else:
            self.logger.warning("No sound recorded")
        time.sleep(10)
        self.onUnload()
        self.onStopped(self.filepath)

    def toExtension(self, sMicrophones):
        if( sMicrophones == "Front head microphone only (.ogg)" ):
            return ".ogg"
        else:
            return ".wav"]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound. The data received on this input must be the&#x0A;filename of the sound." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" /><Parameter name="Microphones used" inherits_from_parent="1" content_type="3" value="Front, sides and rear head microphones (.wav)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="5"><Choice value="Front head microphone only (.ogg)" /><Choice value="Front, sides and rear head microphones (.wav)" /></Parameter></Box><Box name="Get File Name" id="10" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="234" y="95"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[import os
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        if( self.getParameter("Temporary storage") ):
            import tempfile
            path = tempfile.mkdtemp() + "/"
        else:
            path = os.path.expanduser('~') + "/recordings/microphones/"
        self.onStopped( path + self.getParameter("File name") )]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="3" value="recording" default_value="" custom_choice="0" tooltip="Name of the file." id="4" /><Parameter name="Temporary storage" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is enabled the file is stored in ~/.cache/currentChoregrapheBehavior&#x0A;or in ~/.cache/&lt;project_name&gt; when you play the behavior from the&#x0A;behavior manager.&#x0A;&#x0A;When it is disabled the file is stored in ~/recordedSounds. You can&#x0A;then get it on your computer using the menu Connection/File transfer." id="5" /></Box><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Audio recorder" type="Lock" timeout="0" /></Box><Box name="Show App Suggested Movie" id="3" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="1518" y="869"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            self.memory = ALProxy("ALMemory")
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self, array):
        id = array[0]

        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = ".lastUploadedChoregrapheBehavior"
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True

                    def callback(x,y):
                        time.sleep(2)
                        try:
                            if self.isRunning:
                                print(id)
                                a=self.memory.getData(id)
                                tabletService.hideWebview()
                                self.logger.info(a)
                                #self.memory.removeData(id)
                                self.onUnload()
                                self.wordRecognized(a)

                            else:
                                self.logger.info('Close')

                        except Exception as e:
                            self.logger.info('Null value!')

                    # attach the callback function to onJSEvent signal
                    tabletService.onTouchDown.connect(callback)
                    #time.sleep(20)
                    #self.onUnload()

                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            print('Success')
        else:
            self.onFailure(id)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="3" type_size="1" nature="3" inner="0" tooltip="" id="3" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="4" /><Output name="onFailure" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="5" /><Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /></Box><Box name="Say Suggested Movie " id="11" localization="8" tooltip="" x="1522" y="975"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")
        self.tts = ALProxy('ALTextToSpeech')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, array):
        # set the local configuration
        configuration = {"bodyLanguageMode":"contextual"}

        # say the text with the local configuration
        self.animatedSpeechProxy.say('\\rspd=80\\'+array[1], configuration)
        self.onStopped(array)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Show App And Speech Reco. Trailer" id="14" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="1525" y="1088"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.memory = ALProxy("ALMemory")
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)

    def onLoad(self):
        from threading import Lock
        self.isRunning = False
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        tabletService = self._getTabletService()
        tabletService.hideWebview()
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False
        self.mutex.release()
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            self.memory = ALProxy("ALMemory")
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self, id):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

        #***********************

        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = ".lastUploadedChoregrapheBehavior"
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True

                    def callback(x,y):
                        time.sleep(3)
                        try:
                            if self.isRunning:
                                a=self.memory.getData(id)
                                self.logger.info(a)
                                self.memory.removeData(id)
                                self.onUnload()
                                if a == 'Other':
                                    self.tts.say('\\rspd=80\\'+str("Tell me something about this movie."))
                                    self.wordRecognizedOther()
                                else:
                                    self.wordRecognized(a)
                            else:
                                self.logger.info('Close')

                        except Exception as e:
                            self.logger.info('Null value!')

                    # attach the callback function to onJSEvent signal
                    tabletService.onTouchDown.connect(callback)

                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            print('Success')
        else:
            self.onUnload()
            self.onStopped(id)


    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.onUnload()
            if value[0] == 'Other':
                self.tts.say('\\rspd=80\\'+str("Tell me something about this movie."))
                self.wordRecognizedOther()
            else:
                self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" /><Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" /><Output name="wordRecognizedOther" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Parameter name="Word list" inherits_from_parent="0" content_type="3" value="Skip;I don&apos;t like it;I like it;Other" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="8" /><Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="45" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="9" /><Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="10" /><Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="11" /><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="Head Scratch Movement" id="12" localization="8" tooltip="Raises hand and scratches head" x="1312" y="951"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        #time.sleep(5)
        #self.tts.say('\\rspd=80\\'+str('Let me think!'))
        ""
    def onInput_onStop(self):
        self.end()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Output name="end" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Timeline enable="1" fps="15" start_frame="5" end_frame="-1" size="469"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe89" index="89"><Diagram scale="100" /></BehaviorKeyframe><BehaviorKeyframe name="Light_AskForAttention" index="471"><Diagram scale="100"><Box name="Light_AskForAttentionEyes" id="1" localization="8" tooltip="Set An Animated Gaze Which Calls For Attention&#x0A;*** state: se/Leds/Light_AskForAttentionEyes/Light_AskForAttentionEyes.x ***&#x0A;*** ref box in: .//5a_release/Leds/Light_AskForAttentionEyes/Light_AskForAttentionEyes.xar ***&#x0A;*** last modification date(svn): 2009-04-17 14:01:23 +0200 ***" x="147" y="233"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.bMustStop = False;
    self.bIsRunning = False;

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.log( self.getName() + ": start - begin" );

    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;

    rDuration = 0.2;
    ALLeds.post.fadeRGB( "FaceLedsTop", 0xff00ff, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsInternal", 0xff00ff, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsBottom", 0xff00ff, rDuration );
    ALLeds.fadeRGB( "FaceLedsExternal", 0xff00ff, rDuration );

    while( not self.bMustStop ):
      rTime = 0.1;
      ALLeds.post.fadeRGB( "FaceLedsTop", 0xffffff, rTime );
      ALLeds.fadeRGB( "FaceLedsBottom", 0xffffff, rTime );
      if( self.bMustStop ):
        break;
      rTime = 0.3
      ALLeds.post.fadeRGB( "FaceLedsTop", 0xff00ff, rTime );
      ALLeds.fadeRGB( "FaceLedsBottom", 0xff00ff, rTime );


    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="END POSE" id="2" localization="8" tooltip="Add to end of all sequences&#x0A;" x="178" y="55"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="20"><ActuatorList model="nao"><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1"><Key frame="20" value="0.349163" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1"><Key frame="20" value="-1.40867" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1"><Key frame="20" value="89.8229" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1"><Key frame="20" value="18.8943" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1"><Key frame="20" value="-43.5088" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1"><Key frame="20" value="-18.7185" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1"><Key frame="20" value="-58.802" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1"><Key frame="20" value="0.918933" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1"><Key frame="20" value="89.8278" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1"><Key frame="20" value="-18.3718" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1"><Key frame="20" value="44.6466" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1"><Key frame="20" value="16.7018" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1"><Key frame="20" value="55.4573" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1"><Key frame="20" value="0.918205" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1"><Key frame="20" value="1.05221" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1"><Key frame="20" value="-1.85673" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1"><Key frame="20" value="3.41509" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1"><Key frame="20" value="4.02469" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1"><Key frame="20" value="-5.98657" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1"><Key frame="20" value="0.528519" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1"><Key frame="20" value="0.616411" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1"><Key frame="20" value="2.10614" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1"><Key frame="20" value="4.81032" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1"><Key frame="20" value="-5.45084" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1"><Key frame="20" value="-0.173507" /></ActuatorCurve></ActuatorList></Timeline></Box><Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="1" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="nao"><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1"><Key frame="20" value="7.11683" /><Key frame="27" value="7.11683" /><Key frame="34" value="7.11683" /><Key frame="40" value="7.11683" /><Key frame="46" value="7.11683" /><Key frame="53" value="7.11683" /><Key frame="59" value="7.11683" /><Key frame="67" value="7.11683" /><Key frame="73" value="7.11683" /><Key frame="79" value="7.11683" /><Key frame="85" value="7.11683" /><Key frame="92" value="7.11683" /><Key frame="99" value="7.11683" /><Key frame="105" value="7.11683" /><Key frame="111" value="7.11683" /><Key frame="118" value="7.11683" /><Key frame="124" value="7.11683" /><Key frame="132" value="7.11683" /><Key frame="138" value="7.11683" /><Key frame="144" value="7.11683" /><Key frame="150" value="7.11683" /><Key frame="157" value="7.11683" /><Key frame="164" value="7.11683" /><Key frame="170" value="7.11683" /><Key frame="176" value="7.11683" /><Key frame="183" value="7.11683" /><Key frame="189" value="7.11683" /><Key frame="197" value="7.11683" /><Key frame="203" value="7.11683" /><Key frame="209" value="7.11683" /><Key frame="215" value="7.11683" /><Key frame="222" value="7.11683" /><Key frame="229" value="7.11683" /><Key frame="235" value="7.11683" /><Key frame="241" value="7.11683" /><Key frame="248" value="7.11683" /><Key frame="254" value="7.11683" /><Key frame="262" value="7.11683" /><Key frame="268" value="7.11683" /><Key frame="274" value="7.11683" /><Key frame="280" value="7.11683" /><Key frame="287" value="7.11683" /><Key frame="294" value="7.11683" /><Key frame="300" value="7.11683" /><Key frame="306" value="7.11683" /><Key frame="313" value="7.11683" /><Key frame="319" value="7.11683" /><Key frame="327" value="7.11683" /><Key frame="333" value="7.11683" /><Key frame="339" value="7.11683" /><Key frame="345" value="7.11683" /><Key frame="352" value="7.11683" /><Key frame="359" value="7.11683" /><Key frame="365" value="7.11683" /><Key frame="371" value="7.11683" /><Key frame="378" value="7.11683" /><Key frame="384" value="7.11683" /><Key frame="392" value="7.11683" /><Key frame="398" value="7.11683" /><Key frame="404" value="7.11683" /><Key frame="410" value="7.11683" /><Key frame="417" value="7.11683" /><Key frame="424" value="7.11683" /><Key frame="430" value="7.11683" /><Key frame="436" value="7.11683" /><Key frame="443" value="7.11683" /><Key frame="449" value="7.11683" /><Key frame="457" value="7.11683" /><Key frame="463" value="7.11683" /><Key frame="469" value="7.11683" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1"><Key frame="20" value="6.76526" /><Key frame="27" value="6.76526" /><Key frame="34" value="6.76526" /><Key frame="40" value="6.76526" /><Key frame="46" value="6.76526" /><Key frame="53" value="6.76526" /><Key frame="59" value="6.76526" /><Key frame="67" value="6.76526" /><Key frame="73" value="6.76526" /><Key frame="79" value="6.76526" /><Key frame="85" value="6.76526" /><Key frame="92" value="6.76526" /><Key frame="99" value="6.76526" /><Key frame="105" value="6.76526" /><Key frame="111" value="6.76526" /><Key frame="118" value="6.76526" /><Key frame="124" value="6.76526" /><Key frame="132" value="6.76526" /><Key frame="138" value="6.76526" /><Key frame="144" value="6.76526" /><Key frame="150" value="6.76526" /><Key frame="157" value="6.76526" /><Key frame="164" value="6.76526" /><Key frame="170" value="6.76526" /><Key frame="176" value="6.76526" /><Key frame="183" value="6.76526" /><Key frame="189" value="6.76526" /><Key frame="197" value="6.76526" /><Key frame="203" value="6.76526" /><Key frame="209" value="6.76526" /><Key frame="215" value="6.76526" /><Key frame="222" value="6.76526" /><Key frame="229" value="6.76526" /><Key frame="235" value="6.76526" /><Key frame="241" value="6.76526" /><Key frame="248" value="6.76526" /><Key frame="254" value="6.76526" /><Key frame="262" value="6.76526" /><Key frame="268" value="6.76526" /><Key frame="274" value="6.76526" /><Key frame="280" value="6.76526" /><Key frame="287" value="6.76526" /><Key frame="294" value="6.76526" /><Key frame="300" value="6.76526" /><Key frame="306" value="6.76526" /><Key frame="313" value="6.76526" /><Key frame="319" value="6.76526" /><Key frame="327" value="6.76526" /><Key frame="333" value="6.76526" /><Key frame="339" value="6.76526" /><Key frame="345" value="6.76526" /><Key frame="352" value="6.76526" /><Key frame="359" value="6.76526" /><Key frame="365" value="6.76526" /><Key frame="371" value="6.76526" /><Key frame="378" value="6.76526" /><Key frame="384" value="6.76526" /><Key frame="392" value="6.76526" /><Key frame="398" value="6.76526" /><Key frame="404" value="6.76526" /><Key frame="410" value="6.76526" /><Key frame="417" value="6.76526" /><Key frame="424" value="6.76526" /><Key frame="430" value="6.76526" /><Key frame="436" value="6.76526" /><Key frame="443" value="6.76526" /><Key frame="449" value="6.76526" /><Key frame="457" value="6.76526" /><Key frame="463" value="6.76526" /><Key frame="469" value="6.76526" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1"><Key frame="20" value="-11.6041" /><Key frame="27" value="-11.6041" /><Key frame="34" value="-11.6041" /><Key frame="40" value="-11.6041" /><Key frame="46" value="-11.6041" /><Key frame="53" value="-11.6041" /><Key frame="59" value="-11.6041" /><Key frame="67" value="-11.6041" /><Key frame="73" value="-11.6041" /><Key frame="79" value="-11.6041" /><Key frame="85" value="-11.6041" /><Key frame="92" value="-11.6041" /><Key frame="99" value="-11.6041" /><Key frame="105" value="-11.6041" /><Key frame="111" value="-11.6041" /><Key frame="118" value="-11.6041" /><Key frame="124" value="-11.6041" /><Key frame="132" value="-11.6041" /><Key frame="138" value="-11.6041" /><Key frame="144" value="-11.6041" /><Key frame="150" value="-11.6041" /><Key frame="157" value="-11.6041" /><Key frame="164" value="-11.6041" /><Key frame="170" value="-11.6041" /><Key frame="176" value="-11.6041" /><Key frame="183" value="-11.6041" /><Key frame="189" value="-11.6041" /><Key frame="197" value="-11.6041" /><Key frame="203" value="-11.6041" /><Key frame="209" value="-11.6041" /><Key frame="215" value="-11.6041" /><Key frame="222" value="-11.6041" /><Key frame="229" value="-11.6041" /><Key frame="235" value="-11.6041" /><Key frame="241" value="-11.6041" /><Key frame="248" value="-11.6041" /><Key frame="254" value="-11.6041" /><Key frame="262" value="-11.6041" /><Key frame="268" value="-11.6041" /><Key frame="274" value="-11.6041" /><Key frame="280" value="-11.6041" /><Key frame="287" value="-11.6041" /><Key frame="294" value="-11.6041" /><Key frame="300" value="-11.6041" /><Key frame="306" value="-11.6041" /><Key frame="313" value="-11.6041" /><Key frame="319" value="-11.6041" /><Key frame="327" value="-11.6041" /><Key frame="333" value="-11.6041" /><Key frame="339" value="-11.6041" /><Key frame="345" value="-11.6041" /><Key frame="352" value="-11.6041" /><Key frame="359" value="-11.6041" /><Key frame="365" value="-11.6041" /><Key frame="371" value="-11.6041" /><Key frame="378" value="-11.6041" /><Key frame="384" value="-11.6041" /><Key frame="392" value="-11.6041" /><Key frame="398" value="-11.6041" /><Key frame="404" value="-11.6041" /><Key frame="410" value="-11.6041" /><Key frame="417" value="-11.6041" /><Key frame="424" value="-11.6041" /><Key frame="430" value="-11.6041" /><Key frame="436" value="-11.6041" /><Key frame="443" value="-11.6041" /><Key frame="449" value="-11.6041" /><Key frame="457" value="-11.6041" /><Key frame="463" value="-11.6041" /><Key frame="469" value="-11.6041" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1"><Key frame="20" value="0.173379" /><Key frame="27" value="0.173379" /><Key frame="34" value="0.173379" /><Key frame="40" value="0.173379" /><Key frame="46" value="0.173379" /><Key frame="53" value="0.173379" /><Key frame="59" value="0.173379" /><Key frame="67" value="0.173379" /><Key frame="73" value="0.173379" /><Key frame="79" value="0.173379" /><Key frame="85" value="0.173379" /><Key frame="92" value="0.173379" /><Key frame="99" value="0.173379" /><Key frame="105" value="0.173379" /><Key frame="111" value="0.173379" /><Key frame="118" value="0.173379" /><Key frame="124" value="0.173379" /><Key frame="132" value="0.173379" /><Key frame="138" value="0.173379" /><Key frame="144" value="0.173379" /><Key frame="150" value="0.173379" /><Key frame="157" value="0.173379" /><Key frame="164" value="0.173379" /><Key frame="170" value="0.173379" /><Key frame="176" value="0.173379" /><Key frame="183" value="0.173379" /><Key frame="189" value="0.173379" /><Key frame="197" value="0.173379" /><Key frame="203" value="0.173379" /><Key frame="209" value="0.173379" /><Key frame="215" value="0.173379" /><Key frame="222" value="0.173379" /><Key frame="229" value="0.173379" /><Key frame="235" value="0.173379" /><Key frame="241" value="0.173379" /><Key frame="248" value="0.173379" /><Key frame="254" value="0.173379" /><Key frame="262" value="0.173379" /><Key frame="268" value="0.173379" /><Key frame="274" value="0.173379" /><Key frame="280" value="0.173379" /><Key frame="287" value="0.173379" /><Key frame="294" value="0.173379" /><Key frame="300" value="0.173379" /><Key frame="306" value="0.173379" /><Key frame="313" value="0.173379" /><Key frame="319" value="0.173379" /><Key frame="327" value="0.173379" /><Key frame="333" value="0.173379" /><Key frame="339" value="0.173379" /><Key frame="345" value="0.173379" /><Key frame="352" value="0.173379" /><Key frame="359" value="0.173379" /><Key frame="365" value="0.173379" /><Key frame="371" value="0.173379" /><Key frame="378" value="0.173379" /><Key frame="384" value="0.173379" /><Key frame="392" value="0.173379" /><Key frame="398" value="0.173379" /><Key frame="404" value="0.173379" /><Key frame="410" value="0.173379" /><Key frame="417" value="0.173379" /><Key frame="424" value="0.173379" /><Key frame="430" value="0.173379" /><Key frame="436" value="0.173379" /><Key frame="443" value="0.173379" /><Key frame="449" value="0.173379" /><Key frame="457" value="0.173379" /><Key frame="463" value="0.173379" /><Key frame="469" value="0.173379" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1"><Key frame="20" value="-70.4916" /><Key frame="27" value="-70.4916" /><Key frame="34" value="-70.4916" /><Key frame="40" value="-70.4916" /><Key frame="46" value="-70.4916" /><Key frame="53" value="-70.4916" /><Key frame="59" value="-70.4916" /><Key frame="67" value="-70.4916" /><Key frame="73" value="-70.4916" /><Key frame="79" value="-70.4916" /><Key frame="85" value="-70.4916" /><Key frame="92" value="-70.4916" /><Key frame="99" value="-70.4916" /><Key frame="105" value="-70.4916" /><Key frame="111" value="-70.4916" /><Key frame="118" value="-70.4916" /><Key frame="124" value="-70.4916" /><Key frame="132" value="-70.4916" /><Key frame="138" value="-70.4916" /><Key frame="144" value="-70.4916" /><Key frame="150" value="-70.4916" /><Key frame="157" value="-70.4916" /><Key frame="164" value="-70.4916" /><Key frame="170" value="-70.4916" /><Key frame="176" value="-70.4916" /><Key frame="183" value="-70.4916" /><Key frame="189" value="-70.4916" /><Key frame="197" value="-70.4916" /><Key frame="203" value="-70.4916" /><Key frame="209" value="-70.4916" /><Key frame="215" value="-70.4916" /><Key frame="222" value="-70.4916" /><Key frame="229" value="-70.4916" /><Key frame="235" value="-70.4916" /><Key frame="241" value="-70.4916" /><Key frame="248" value="-70.4916" /><Key frame="254" value="-70.4916" /><Key frame="262" value="-70.4916" /><Key frame="268" value="-70.4916" /><Key frame="274" value="-70.4916" /><Key frame="280" value="-70.4916" /><Key frame="287" value="-70.4916" /><Key frame="294" value="-70.4916" /><Key frame="300" value="-70.4916" /><Key frame="306" value="-70.4916" /><Key frame="313" value="-70.4916" /><Key frame="319" value="-70.4916" /><Key frame="327" value="-70.4916" /><Key frame="333" value="-70.4916" /><Key frame="339" value="-70.4916" /><Key frame="345" value="-70.4916" /><Key frame="352" value="-70.4916" /><Key frame="359" value="-70.4916" /><Key frame="365" value="-70.4916" /><Key frame="371" value="-70.4916" /><Key frame="378" value="-70.4916" /><Key frame="384" value="-70.4916" /><Key frame="392" value="-70.4916" /><Key frame="398" value="-70.4916" /><Key frame="404" value="-70.4916" /><Key frame="410" value="-70.4916" /><Key frame="417" value="-70.4916" /><Key frame="424" value="-70.4916" /><Key frame="430" value="-70.4916" /><Key frame="436" value="-70.4916" /><Key frame="443" value="-70.4916" /><Key frame="449" value="-70.4916" /><Key frame="457" value="-70.4916" /><Key frame="463" value="-70.4916" /><Key frame="469" value="-70.4916" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1"><Key frame="20" value="-89.3835" /><Key frame="27" value="-89.3835" /><Key frame="34" value="-89.3835" /><Key frame="40" value="-89.3835" /><Key frame="46" value="-89.3835" /><Key frame="53" value="-89.3835" /><Key frame="59" value="-89.3835" /><Key frame="67" value="-89.3835" /><Key frame="73" value="-89.3835" /><Key frame="79" value="-89.3835" /><Key frame="85" value="-89.3835" /><Key frame="92" value="-89.3835" /><Key frame="99" value="-89.3835" /><Key frame="105" value="-89.3835" /><Key frame="111" value="-89.3835" /><Key frame="118" value="-89.3835" /><Key frame="124" value="-89.3835" /><Key frame="132" value="-89.3835" /><Key frame="138" value="-89.3835" /><Key frame="144" value="-89.3835" /><Key frame="150" value="-89.3835" /><Key frame="157" value="-89.3835" /><Key frame="164" value="-89.3835" /><Key frame="170" value="-89.3835" /><Key frame="176" value="-89.3835" /><Key frame="183" value="-89.3835" /><Key frame="189" value="-89.3835" /><Key frame="197" value="-89.3835" /><Key frame="203" value="-89.3835" /><Key frame="209" value="-89.3835" /><Key frame="215" value="-89.3835" /><Key frame="222" value="-89.3835" /><Key frame="229" value="-89.3835" /><Key frame="235" value="-89.3835" /><Key frame="241" value="-89.3835" /><Key frame="248" value="-89.3835" /><Key frame="254" value="-89.3835" /><Key frame="262" value="-89.3835" /><Key frame="268" value="-89.3835" /><Key frame="274" value="-89.3835" /><Key frame="280" value="-89.3835" /><Key frame="287" value="-89.3835" /><Key frame="294" value="-89.3835" /><Key frame="300" value="-89.3835" /><Key frame="306" value="-89.3835" /><Key frame="313" value="-89.3835" /><Key frame="319" value="-89.3835" /><Key frame="327" value="-89.3835" /><Key frame="333" value="-89.3835" /><Key frame="339" value="-89.3835" /><Key frame="345" value="-89.3835" /><Key frame="352" value="-89.3835" /><Key frame="359" value="-89.3835" /><Key frame="365" value="-89.3835" /><Key frame="371" value="-89.3835" /><Key frame="378" value="-89.3835" /><Key frame="384" value="-89.3835" /><Key frame="392" value="-89.3835" /><Key frame="398" value="-89.3835" /><Key frame="404" value="-89.3835" /><Key frame="410" value="-89.3835" /><Key frame="417" value="-89.3835" /><Key frame="424" value="-89.3835" /><Key frame="430" value="-89.3835" /><Key frame="436" value="-89.3835" /><Key frame="443" value="-89.3835" /><Key frame="449" value="-89.3835" /><Key frame="457" value="-89.3835" /><Key frame="463" value="-89.3835" /><Key frame="469" value="-89.3835" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1"><Key frame="20" value="-28.3914" /><Key frame="27" value="-29.7977" /><Key frame="34" value="-28.3914" /><Key frame="40" value="-29.7977" /><Key frame="46" value="-28.3914" /><Key frame="53" value="-28.3914" /><Key frame="59" value="-29.7977" /><Key frame="67" value="-28.3914" /><Key frame="73" value="-29.7977" /><Key frame="79" value="-28.3914" /><Key frame="85" value="-28.3914" /><Key frame="92" value="-29.7977" /><Key frame="99" value="-28.3914" /><Key frame="105" value="-29.7977" /><Key frame="111" value="-28.3914" /><Key frame="118" value="-28.3914" /><Key frame="124" value="-29.7977" /><Key frame="132" value="-28.3914" /><Key frame="138" value="-29.7977" /><Key frame="144" value="-28.3914" /><Key frame="150" value="-28.3914" /><Key frame="157" value="-29.7977" /><Key frame="164" value="-28.3914" /><Key frame="170" value="-29.7977" /><Key frame="176" value="-28.3914" /><Key frame="183" value="-28.3914" /><Key frame="189" value="-29.7977" /><Key frame="197" value="-28.3914" /><Key frame="203" value="-29.7977" /><Key frame="209" value="-28.3914" /><Key frame="215" value="-28.3914" /><Key frame="222" value="-29.7977" /><Key frame="229" value="-28.3914" /><Key frame="235" value="-29.7977" /><Key frame="241" value="-28.3914" /><Key frame="248" value="-28.3914" /><Key frame="254" value="-29.7977" /><Key frame="262" value="-28.3914" /><Key frame="268" value="-29.7977" /><Key frame="274" value="-28.3914" /><Key frame="280" value="-28.3914" /><Key frame="287" value="-29.7977" /><Key frame="294" value="-28.3914" /><Key frame="300" value="-29.7977" /><Key frame="306" value="-28.3914" /><Key frame="313" value="-28.3914" /><Key frame="319" value="-29.7977" /><Key frame="327" value="-28.3914" /><Key frame="333" value="-29.7977" /><Key frame="339" value="-28.3914" /><Key frame="345" value="-28.3914" /><Key frame="352" value="-29.7977" /><Key frame="359" value="-28.3914" /><Key frame="365" value="-29.7977" /><Key frame="371" value="-28.3914" /><Key frame="378" value="-28.3914" /><Key frame="384" value="-29.7977" /><Key frame="392" value="-28.3914" /><Key frame="398" value="-29.7977" /><Key frame="404" value="-28.3914" /><Key frame="410" value="-28.3914" /><Key frame="417" value="-29.7977" /><Key frame="424" value="-28.3914" /><Key frame="430" value="-29.7977" /><Key frame="436" value="-28.3914" /><Key frame="443" value="-28.3914" /><Key frame="449" value="-29.7977" /><Key frame="457" value="-28.3914" /><Key frame="463" value="-29.7977" /><Key frame="469" value="-28.3914" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1"><Key frame="20" value="0.380389" /><Key frame="27" value="0.718933" /><Key frame="34" value="0.380389" /><Key frame="40" value="0.718933" /><Key frame="46" value="0.380389" /><Key frame="53" value="0.380389" /><Key frame="59" value="0.718933" /><Key frame="67" value="0.380389" /><Key frame="73" value="0.718933" /><Key frame="79" value="0.380389" /><Key frame="85" value="0.380389" /><Key frame="92" value="0.718933" /><Key frame="99" value="0.380389" /><Key frame="105" value="0.718933" /><Key frame="111" value="0.380389" /><Key frame="118" value="0.380389" /><Key frame="124" value="0.718933" /><Key frame="132" value="0.380389" /><Key frame="138" value="0.718933" /><Key frame="144" value="0.380389" /><Key frame="150" value="0.380389" /><Key frame="157" value="0.718933" /><Key frame="164" value="0.380389" /><Key frame="170" value="0.718933" /><Key frame="176" value="0.380389" /><Key frame="183" value="0.380389" /><Key frame="189" value="0.718933" /><Key frame="197" value="0.380389" /><Key frame="203" value="0.718933" /><Key frame="209" value="0.380389" /><Key frame="215" value="0.380389" /><Key frame="222" value="0.718933" /><Key frame="229" value="0.380389" /><Key frame="235" value="0.718933" /><Key frame="241" value="0.380389" /><Key frame="248" value="0.380389" /><Key frame="254" value="0.718933" /><Key frame="262" value="0.380389" /><Key frame="268" value="0.718933" /><Key frame="274" value="0.380389" /><Key frame="280" value="0.380389" /><Key frame="287" value="0.718933" /><Key frame="294" value="0.380389" /><Key frame="300" value="0.718933" /><Key frame="306" value="0.380389" /><Key frame="313" value="0.380389" /><Key frame="319" value="0.718933" /><Key frame="327" value="0.380389" /><Key frame="333" value="0.718933" /><Key frame="339" value="0.380389" /><Key frame="345" value="0.380389" /><Key frame="352" value="0.718933" /><Key frame="359" value="0.380389" /><Key frame="365" value="0.718933" /><Key frame="371" value="0.380389" /><Key frame="378" value="0.380389" /><Key frame="384" value="0.718933" /><Key frame="392" value="0.380389" /><Key frame="398" value="0.718933" /><Key frame="404" value="0.380389" /><Key frame="410" value="0.380389" /><Key frame="417" value="0.718933" /><Key frame="424" value="0.380389" /><Key frame="430" value="0.718933" /><Key frame="436" value="0.380389" /><Key frame="443" value="0.380389" /><Key frame="449" value="0.718933" /><Key frame="457" value="0.380389" /><Key frame="463" value="0.718933" /><Key frame="469" value="0.380389" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1"><Key frame="20" value="82.6206" /><Key frame="27" value="82.6206" /><Key frame="34" value="82.6206" /><Key frame="40" value="82.6206" /><Key frame="46" value="82.6206" /><Key frame="53" value="82.6206" /><Key frame="59" value="82.6206" /><Key frame="67" value="82.6206" /><Key frame="73" value="82.6206" /><Key frame="79" value="82.6206" /><Key frame="85" value="82.6206" /><Key frame="92" value="82.6206" /><Key frame="99" value="82.6206" /><Key frame="105" value="82.6206" /><Key frame="111" value="82.6206" /><Key frame="118" value="82.6206" /><Key frame="124" value="82.6206" /><Key frame="132" value="82.6206" /><Key frame="138" value="82.6206" /><Key frame="144" value="82.6206" /><Key frame="150" value="82.6206" /><Key frame="157" value="82.6206" /><Key frame="164" value="82.6206" /><Key frame="170" value="82.6206" /><Key frame="176" value="82.6206" /><Key frame="183" value="82.6206" /><Key frame="189" value="82.6206" /><Key frame="197" value="82.6206" /><Key frame="203" value="82.6206" /><Key frame="209" value="82.6206" /><Key frame="215" value="82.6206" /><Key frame="222" value="82.6206" /><Key frame="229" value="82.6206" /><Key frame="235" value="82.6206" /><Key frame="241" value="82.6206" /><Key frame="248" value="82.6206" /><Key frame="254" value="82.6206" /><Key frame="262" value="82.6206" /><Key frame="268" value="82.6206" /><Key frame="274" value="82.6206" /><Key frame="280" value="82.6206" /><Key frame="287" value="82.6206" /><Key frame="294" value="82.6206" /><Key frame="300" value="82.6206" /><Key frame="306" value="82.6206" /><Key frame="313" value="82.6206" /><Key frame="319" value="82.6206" /><Key frame="327" value="82.6206" /><Key frame="333" value="82.6206" /><Key frame="339" value="82.6206" /><Key frame="345" value="82.6206" /><Key frame="352" value="82.6206" /><Key frame="359" value="82.6206" /><Key frame="365" value="82.6206" /><Key frame="371" value="82.6206" /><Key frame="378" value="82.6206" /><Key frame="384" value="82.6206" /><Key frame="392" value="82.6206" /><Key frame="398" value="82.6206" /><Key frame="404" value="82.6206" /><Key frame="410" value="82.6206" /><Key frame="417" value="82.6206" /><Key frame="424" value="82.6206" /><Key frame="430" value="82.6206" /><Key frame="436" value="82.6206" /><Key frame="443" value="82.6206" /><Key frame="449" value="82.6206" /><Key frame="457" value="82.6206" /><Key frame="463" value="82.6206" /><Key frame="469" value="82.6206" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1"><Key frame="20" value="-13.4498" /><Key frame="27" value="-13.4498" /><Key frame="34" value="-13.4498" /><Key frame="40" value="-13.4498" /><Key frame="46" value="-13.4498" /><Key frame="53" value="-13.4498" /><Key frame="59" value="-13.4498" /><Key frame="67" value="-13.4498" /><Key frame="73" value="-13.4498" /><Key frame="79" value="-13.4498" /><Key frame="85" value="-13.4498" /><Key frame="92" value="-13.4498" /><Key frame="99" value="-13.4498" /><Key frame="105" value="-13.4498" /><Key frame="111" value="-13.4498" /><Key frame="118" value="-13.4498" /><Key frame="124" value="-13.4498" /><Key frame="132" value="-13.4498" /><Key frame="138" value="-13.4498" /><Key frame="144" value="-13.4498" /><Key frame="150" value="-13.4498" /><Key frame="157" value="-13.4498" /><Key frame="164" value="-13.4498" /><Key frame="170" value="-13.4498" /><Key frame="176" value="-13.4498" /><Key frame="183" value="-13.4498" /><Key frame="189" value="-13.4498" /><Key frame="197" value="-13.4498" /><Key frame="203" value="-13.4498" /><Key frame="209" value="-13.4498" /><Key frame="215" value="-13.4498" /><Key frame="222" value="-13.4498" /><Key frame="229" value="-13.4498" /><Key frame="235" value="-13.4498" /><Key frame="241" value="-13.4498" /><Key frame="248" value="-13.4498" /><Key frame="254" value="-13.4498" /><Key frame="262" value="-13.4498" /><Key frame="268" value="-13.4498" /><Key frame="274" value="-13.4498" /><Key frame="280" value="-13.4498" /><Key frame="287" value="-13.4498" /><Key frame="294" value="-13.4498" /><Key frame="300" value="-13.4498" /><Key frame="306" value="-13.4498" /><Key frame="313" value="-13.4498" /><Key frame="319" value="-13.4498" /><Key frame="327" value="-13.4498" /><Key frame="333" value="-13.4498" /><Key frame="339" value="-13.4498" /><Key frame="345" value="-13.4498" /><Key frame="352" value="-13.4498" /><Key frame="359" value="-13.4498" /><Key frame="365" value="-13.4498" /><Key frame="371" value="-13.4498" /><Key frame="378" value="-13.4498" /><Key frame="384" value="-13.4498" /><Key frame="392" value="-13.4498" /><Key frame="398" value="-13.4498" /><Key frame="404" value="-13.4498" /><Key frame="410" value="-13.4498" /><Key frame="417" value="-13.4498" /><Key frame="424" value="-13.4498" /><Key frame="430" value="-13.4498" /><Key frame="436" value="-13.4498" /><Key frame="443" value="-13.4498" /><Key frame="449" value="-13.4498" /><Key frame="457" value="-13.4498" /><Key frame="463" value="-13.4498" /><Key frame="469" value="-13.4498" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1"><Key frame="20" value="51.59" /><Key frame="27" value="51.59" /><Key frame="34" value="51.59" /><Key frame="40" value="51.59" /><Key frame="46" value="51.59" /><Key frame="53" value="51.59" /><Key frame="59" value="51.59" /><Key frame="67" value="51.59" /><Key frame="73" value="51.59" /><Key frame="79" value="51.59" /><Key frame="85" value="51.59" /><Key frame="92" value="51.59" /><Key frame="99" value="51.59" /><Key frame="105" value="51.59" /><Key frame="111" value="51.59" /><Key frame="118" value="51.59" /><Key frame="124" value="51.59" /><Key frame="132" value="51.59" /><Key frame="138" value="51.59" /><Key frame="144" value="51.59" /><Key frame="150" value="51.59" /><Key frame="157" value="51.59" /><Key frame="164" value="51.59" /><Key frame="170" value="51.59" /><Key frame="176" value="51.59" /><Key frame="183" value="51.59" /><Key frame="189" value="51.59" /><Key frame="197" value="51.59" /><Key frame="203" value="51.59" /><Key frame="209" value="51.59" /><Key frame="215" value="51.59" /><Key frame="222" value="51.59" /><Key frame="229" value="51.59" /><Key frame="235" value="51.59" /><Key frame="241" value="51.59" /><Key frame="248" value="51.59" /><Key frame="254" value="51.59" /><Key frame="262" value="51.59" /><Key frame="268" value="51.59" /><Key frame="274" value="51.59" /><Key frame="280" value="51.59" /><Key frame="287" value="51.59" /><Key frame="294" value="51.59" /><Key frame="300" value="51.59" /><Key frame="306" value="51.59" /><Key frame="313" value="51.59" /><Key frame="319" value="51.59" /><Key frame="327" value="51.59" /><Key frame="333" value="51.59" /><Key frame="339" value="51.59" /><Key frame="345" value="51.59" /><Key frame="352" value="51.59" /><Key frame="359" value="51.59" /><Key frame="365" value="51.59" /><Key frame="371" value="51.59" /><Key frame="378" value="51.59" /><Key frame="384" value="51.59" /><Key frame="392" value="51.59" /><Key frame="398" value="51.59" /><Key frame="404" value="51.59" /><Key frame="410" value="51.59" /><Key frame="417" value="51.59" /><Key frame="424" value="51.59" /><Key frame="430" value="51.59" /><Key frame="436" value="51.59" /><Key frame="443" value="51.59" /><Key frame="449" value="51.59" /><Key frame="457" value="51.59" /><Key frame="463" value="51.59" /><Key frame="469" value="51.59" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1"><Key frame="20" value="43.1572" /><Key frame="27" value="43.1572" /><Key frame="34" value="43.1572" /><Key frame="40" value="43.1572" /><Key frame="46" value="43.1572" /><Key frame="53" value="43.1572" /><Key frame="59" value="43.1572" /><Key frame="67" value="43.1572" /><Key frame="73" value="43.1572" /><Key frame="79" value="43.1572" /><Key frame="85" value="43.1572" /><Key frame="92" value="43.1572" /><Key frame="99" value="43.1572" /><Key frame="105" value="43.1572" /><Key frame="111" value="43.1572" /><Key frame="118" value="43.1572" /><Key frame="124" value="43.1572" /><Key frame="132" value="43.1572" /><Key frame="138" value="43.1572" /><Key frame="144" value="43.1572" /><Key frame="150" value="43.1572" /><Key frame="157" value="43.1572" /><Key frame="164" value="43.1572" /><Key frame="170" value="43.1572" /><Key frame="176" value="43.1572" /><Key frame="183" value="43.1572" /><Key frame="189" value="43.1572" /><Key frame="197" value="43.1572" /><Key frame="203" value="43.1572" /><Key frame="209" value="43.1572" /><Key frame="215" value="43.1572" /><Key frame="222" value="43.1572" /><Key frame="229" value="43.1572" /><Key frame="235" value="43.1572" /><Key frame="241" value="43.1572" /><Key frame="248" value="43.1572" /><Key frame="254" value="43.1572" /><Key frame="262" value="43.1572" /><Key frame="268" value="43.1572" /><Key frame="274" value="43.1572" /><Key frame="280" value="43.1572" /><Key frame="287" value="43.1572" /><Key frame="294" value="43.1572" /><Key frame="300" value="43.1572" /><Key frame="306" value="43.1572" /><Key frame="313" value="43.1572" /><Key frame="319" value="43.1572" /><Key frame="327" value="43.1572" /><Key frame="333" value="43.1572" /><Key frame="339" value="43.1572" /><Key frame="345" value="43.1572" /><Key frame="352" value="43.1572" /><Key frame="359" value="43.1572" /><Key frame="365" value="43.1572" /><Key frame="371" value="43.1572" /><Key frame="378" value="43.1572" /><Key frame="384" value="43.1572" /><Key frame="392" value="43.1572" /><Key frame="398" value="43.1572" /><Key frame="404" value="43.1572" /><Key frame="410" value="43.1572" /><Key frame="417" value="43.1572" /><Key frame="424" value="43.1572" /><Key frame="430" value="43.1572" /><Key frame="436" value="43.1572" /><Key frame="443" value="43.1572" /><Key frame="449" value="43.1572" /><Key frame="457" value="43.1572" /><Key frame="463" value="43.1572" /><Key frame="469" value="43.1572" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1"><Key frame="20" value="7.11683" /><Key frame="27" value="8.52309" /><Key frame="34" value="7.11683" /><Key frame="40" value="8.52309" /><Key frame="46" value="7.11683" /><Key frame="53" value="7.11683" /><Key frame="59" value="8.52309" /><Key frame="67" value="7.11683" /><Key frame="73" value="8.52309" /><Key frame="79" value="7.11683" /><Key frame="85" value="7.11683" /><Key frame="92" value="8.52309" /><Key frame="99" value="7.11683" /><Key frame="105" value="8.52309" /><Key frame="111" value="7.11683" /><Key frame="118" value="7.11683" /><Key frame="124" value="8.52309" /><Key frame="132" value="7.11683" /><Key frame="138" value="8.52309" /><Key frame="144" value="7.11683" /><Key frame="150" value="7.11683" /><Key frame="157" value="8.52309" /><Key frame="164" value="7.11683" /><Key frame="170" value="8.52309" /><Key frame="176" value="7.11683" /><Key frame="183" value="7.11683" /><Key frame="189" value="8.52309" /><Key frame="197" value="7.11683" /><Key frame="203" value="8.52309" /><Key frame="209" value="7.11683" /><Key frame="215" value="7.11683" /><Key frame="222" value="8.52309" /><Key frame="229" value="7.11683" /><Key frame="235" value="8.52309" /><Key frame="241" value="7.11683" /><Key frame="248" value="7.11683" /><Key frame="254" value="8.52309" /><Key frame="262" value="7.11683" /><Key frame="268" value="8.52309" /><Key frame="274" value="7.11683" /><Key frame="280" value="7.11683" /><Key frame="287" value="8.52309" /><Key frame="294" value="7.11683" /><Key frame="300" value="8.52309" /><Key frame="306" value="7.11683" /><Key frame="313" value="7.11683" /><Key frame="319" value="8.52309" /><Key frame="327" value="7.11683" /><Key frame="333" value="8.52309" /><Key frame="339" value="7.11683" /><Key frame="345" value="7.11683" /><Key frame="352" value="8.52309" /><Key frame="359" value="7.11683" /><Key frame="365" value="8.52309" /><Key frame="371" value="7.11683" /><Key frame="378" value="7.11683" /><Key frame="384" value="8.52309" /><Key frame="392" value="7.11683" /><Key frame="398" value="8.52309" /><Key frame="404" value="7.11683" /><Key frame="410" value="7.11683" /><Key frame="417" value="8.52309" /><Key frame="424" value="7.11683" /><Key frame="430" value="8.52309" /><Key frame="436" value="7.11683" /><Key frame="443" value="7.11683" /><Key frame="449" value="8.52309" /><Key frame="457" value="7.11683" /><Key frame="463" value="8.52309" /><Key frame="469" value="7.11683" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1"><Key frame="20" value="0.28148" /><Key frame="27" value="0.281844" /><Key frame="34" value="0.28148" /><Key frame="40" value="0.281844" /><Key frame="46" value="0.28148" /><Key frame="53" value="0.28148" /><Key frame="59" value="0.281844" /><Key frame="67" value="0.28148" /><Key frame="73" value="0.281844" /><Key frame="79" value="0.28148" /><Key frame="85" value="0.28148" /><Key frame="92" value="0.281844" /><Key frame="99" value="0.28148" /><Key frame="105" value="0.281844" /><Key frame="111" value="0.28148" /><Key frame="118" value="0.28148" /><Key frame="124" value="0.281844" /><Key frame="132" value="0.28148" /><Key frame="138" value="0.281844" /><Key frame="144" value="0.28148" /><Key frame="150" value="0.28148" /><Key frame="157" value="0.281844" /><Key frame="164" value="0.28148" /><Key frame="170" value="0.281844" /><Key frame="176" value="0.28148" /><Key frame="183" value="0.28148" /><Key frame="189" value="0.281844" /><Key frame="197" value="0.28148" /><Key frame="203" value="0.281844" /><Key frame="209" value="0.28148" /><Key frame="215" value="0.28148" /><Key frame="222" value="0.281844" /><Key frame="229" value="0.28148" /><Key frame="235" value="0.281844" /><Key frame="241" value="0.28148" /><Key frame="248" value="0.28148" /><Key frame="254" value="0.281844" /><Key frame="262" value="0.28148" /><Key frame="268" value="0.281844" /><Key frame="274" value="0.28148" /><Key frame="280" value="0.28148" /><Key frame="287" value="0.281844" /><Key frame="294" value="0.28148" /><Key frame="300" value="0.281844" /><Key frame="306" value="0.28148" /><Key frame="313" value="0.28148" /><Key frame="319" value="0.281844" /><Key frame="327" value="0.28148" /><Key frame="333" value="0.281844" /><Key frame="339" value="0.28148" /><Key frame="345" value="0.28148" /><Key frame="352" value="0.281844" /><Key frame="359" value="0.28148" /><Key frame="365" value="0.281844" /><Key frame="371" value="0.28148" /><Key frame="378" value="0.28148" /><Key frame="384" value="0.281844" /><Key frame="392" value="0.28148" /><Key frame="398" value="0.281844" /><Key frame="404" value="0.28148" /><Key frame="410" value="0.28148" /><Key frame="417" value="0.281844" /><Key frame="424" value="0.28148" /><Key frame="430" value="0.281844" /><Key frame="436" value="0.28148" /><Key frame="443" value="0.28148" /><Key frame="449" value="0.281844" /><Key frame="457" value="0.28148" /><Key frame="463" value="0.281844" /><Key frame="469" value="0.28148" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1"><Key frame="20" value="-28.4794" /><Key frame="27" value="-28.4794" /><Key frame="34" value="-28.4794" /><Key frame="40" value="-28.4794" /><Key frame="46" value="-28.4794" /><Key frame="53" value="-28.4794" /><Key frame="59" value="-28.4794" /><Key frame="67" value="-28.4794" /><Key frame="73" value="-28.4794" /><Key frame="79" value="-28.4794" /><Key frame="85" value="-28.4794" /><Key frame="92" value="-28.4794" /><Key frame="99" value="-28.4794" /><Key frame="105" value="-28.4794" /><Key frame="111" value="-28.4794" /><Key frame="118" value="-28.4794" /><Key frame="124" value="-28.4794" /><Key frame="132" value="-28.4794" /><Key frame="138" value="-28.4794" /><Key frame="144" value="-28.4794" /><Key frame="150" value="-28.4794" /><Key frame="157" value="-28.4794" /><Key frame="164" value="-28.4794" /><Key frame="170" value="-28.4794" /><Key frame="176" value="-28.4794" /><Key frame="183" value="-28.4794" /><Key frame="189" value="-28.4794" /><Key frame="197" value="-28.4794" /><Key frame="203" value="-28.4794" /><Key frame="209" value="-28.4794" /><Key frame="215" value="-28.4794" /><Key frame="222" value="-28.4794" /><Key frame="229" value="-28.4794" /><Key frame="235" value="-28.4794" /><Key frame="241" value="-28.4794" /><Key frame="248" value="-28.4794" /><Key frame="254" value="-28.4794" /><Key frame="262" value="-28.4794" /><Key frame="268" value="-28.4794" /><Key frame="274" value="-28.4794" /><Key frame="280" value="-28.4794" /><Key frame="287" value="-28.4794" /><Key frame="294" value="-28.4794" /><Key frame="300" value="-28.4794" /><Key frame="306" value="-28.4794" /><Key frame="313" value="-28.4794" /><Key frame="319" value="-28.4794" /><Key frame="327" value="-28.4794" /><Key frame="333" value="-28.4794" /><Key frame="339" value="-28.4794" /><Key frame="345" value="-28.4794" /><Key frame="352" value="-28.4794" /><Key frame="359" value="-28.4794" /><Key frame="365" value="-28.4794" /><Key frame="371" value="-28.4794" /><Key frame="378" value="-28.4794" /><Key frame="384" value="-28.4794" /><Key frame="392" value="-28.4794" /><Key frame="398" value="-28.4794" /><Key frame="404" value="-28.4794" /><Key frame="410" value="-28.4794" /><Key frame="417" value="-28.4794" /><Key frame="424" value="-28.4794" /><Key frame="430" value="-28.4794" /><Key frame="436" value="-28.4794" /><Key frame="443" value="-28.4794" /><Key frame="449" value="-28.4794" /><Key frame="457" value="-28.4794" /><Key frame="463" value="-28.4794" /><Key frame="469" value="-28.4794" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1"><Key frame="20" value="4.91093" /><Key frame="27" value="4.91093" /><Key frame="34" value="4.91093" /><Key frame="40" value="4.91093" /><Key frame="46" value="4.91093" /><Key frame="53" value="4.91093" /><Key frame="59" value="4.91093" /><Key frame="67" value="4.91093" /><Key frame="73" value="4.91093" /><Key frame="79" value="4.91093" /><Key frame="85" value="4.91093" /><Key frame="92" value="4.91093" /><Key frame="99" value="4.91093" /><Key frame="105" value="4.91093" /><Key frame="111" value="4.91093" /><Key frame="118" value="4.91093" /><Key frame="124" value="4.91093" /><Key frame="132" value="4.91093" /><Key frame="138" value="4.91093" /><Key frame="144" value="4.91093" /><Key frame="150" value="4.91093" /><Key frame="157" value="4.91093" /><Key frame="164" value="4.91093" /><Key frame="170" value="4.91093" /><Key frame="176" value="4.91093" /><Key frame="183" value="4.91093" /><Key frame="189" value="4.91093" /><Key frame="197" value="4.91093" /><Key frame="203" value="4.91093" /><Key frame="209" value="4.91093" /><Key frame="215" value="4.91093" /><Key frame="222" value="4.91093" /><Key frame="229" value="4.91093" /><Key frame="235" value="4.91093" /><Key frame="241" value="4.91093" /><Key frame="248" value="4.91093" /><Key frame="254" value="4.91093" /><Key frame="262" value="4.91093" /><Key frame="268" value="4.91093" /><Key frame="274" value="4.91093" /><Key frame="280" value="4.91093" /><Key frame="287" value="4.91093" /><Key frame="294" value="4.91093" /><Key frame="300" value="4.91093" /><Key frame="306" value="4.91093" /><Key frame="313" value="4.91093" /><Key frame="319" value="4.91093" /><Key frame="327" value="4.91093" /><Key frame="333" value="4.91093" /><Key frame="339" value="4.91093" /><Key frame="345" value="4.91093" /><Key frame="352" value="4.91093" /><Key frame="359" value="4.91093" /><Key frame="365" value="4.91093" /><Key frame="371" value="4.91093" /><Key frame="378" value="4.91093" /><Key frame="384" value="4.91093" /><Key frame="392" value="4.91093" /><Key frame="398" value="4.91093" /><Key frame="404" value="4.91093" /><Key frame="410" value="4.91093" /><Key frame="417" value="4.91093" /><Key frame="424" value="4.91093" /><Key frame="430" value="4.91093" /><Key frame="436" value="4.91093" /><Key frame="443" value="4.91093" /><Key frame="449" value="4.91093" /><Key frame="457" value="4.91093" /><Key frame="463" value="4.91093" /><Key frame="469" value="4.91093" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1"><Key frame="20" value="20.1145" /><Key frame="27" value="20.1145" /><Key frame="34" value="20.1145" /><Key frame="40" value="20.1145" /><Key frame="46" value="20.1145" /><Key frame="53" value="20.1145" /><Key frame="59" value="20.1145" /><Key frame="67" value="20.1145" /><Key frame="73" value="20.1145" /><Key frame="79" value="20.1145" /><Key frame="85" value="20.1145" /><Key frame="92" value="20.1145" /><Key frame="99" value="20.1145" /><Key frame="105" value="20.1145" /><Key frame="111" value="20.1145" /><Key frame="118" value="20.1145" /><Key frame="124" value="20.1145" /><Key frame="132" value="20.1145" /><Key frame="138" value="20.1145" /><Key frame="144" value="20.1145" /><Key frame="150" value="20.1145" /><Key frame="157" value="20.1145" /><Key frame="164" value="20.1145" /><Key frame="170" value="20.1145" /><Key frame="176" value="20.1145" /><Key frame="183" value="20.1145" /><Key frame="189" value="20.1145" /><Key frame="197" value="20.1145" /><Key frame="203" value="20.1145" /><Key frame="209" value="20.1145" /><Key frame="215" value="20.1145" /><Key frame="222" value="20.1145" /><Key frame="229" value="20.1145" /><Key frame="235" value="20.1145" /><Key frame="241" value="20.1145" /><Key frame="248" value="20.1145" /><Key frame="254" value="20.1145" /><Key frame="262" value="20.1145" /><Key frame="268" value="20.1145" /><Key frame="274" value="20.1145" /><Key frame="280" value="20.1145" /><Key frame="287" value="20.1145" /><Key frame="294" value="20.1145" /><Key frame="300" value="20.1145" /><Key frame="306" value="20.1145" /><Key frame="313" value="20.1145" /><Key frame="319" value="20.1145" /><Key frame="327" value="20.1145" /><Key frame="333" value="20.1145" /><Key frame="339" value="20.1145" /><Key frame="345" value="20.1145" /><Key frame="352" value="20.1145" /><Key frame="359" value="20.1145" /><Key frame="365" value="20.1145" /><Key frame="371" value="20.1145" /><Key frame="378" value="20.1145" /><Key frame="384" value="20.1145" /><Key frame="392" value="20.1145" /><Key frame="398" value="20.1145" /><Key frame="404" value="20.1145" /><Key frame="410" value="20.1145" /><Key frame="417" value="20.1145" /><Key frame="424" value="20.1145" /><Key frame="430" value="20.1145" /><Key frame="436" value="20.1145" /><Key frame="443" value="20.1145" /><Key frame="449" value="20.1145" /><Key frame="457" value="20.1145" /><Key frame="463" value="20.1145" /><Key frame="469" value="20.1145" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1"><Key frame="20" value="0" /><Key frame="27" value="0" /><Key frame="34" value="0" /><Key frame="40" value="0" /><Key frame="46" value="0" /><Key frame="53" value="0" /><Key frame="59" value="0" /><Key frame="67" value="0" /><Key frame="73" value="0" /><Key frame="79" value="0" /><Key frame="85" value="0" /><Key frame="92" value="0" /><Key frame="99" value="0" /><Key frame="105" value="0" /><Key frame="111" value="0" /><Key frame="118" value="0" /><Key frame="124" value="0" /><Key frame="132" value="0" /><Key frame="138" value="0" /><Key frame="144" value="0" /><Key frame="150" value="0" /><Key frame="157" value="0" /><Key frame="164" value="0" /><Key frame="170" value="0" /><Key frame="176" value="0" /><Key frame="183" value="0" /><Key frame="189" value="0" /><Key frame="197" value="0" /><Key frame="203" value="0" /><Key frame="209" value="0" /><Key frame="215" value="0" /><Key frame="222" value="0" /><Key frame="229" value="0" /><Key frame="235" value="0" /><Key frame="241" value="0" /><Key frame="248" value="0" /><Key frame="254" value="0" /><Key frame="262" value="0" /><Key frame="268" value="0" /><Key frame="274" value="0" /><Key frame="280" value="0" /><Key frame="287" value="0" /><Key frame="294" value="0" /><Key frame="300" value="0" /><Key frame="306" value="0" /><Key frame="313" value="0" /><Key frame="319" value="0" /><Key frame="327" value="0" /><Key frame="333" value="0" /><Key frame="339" value="0" /><Key frame="345" value="0" /><Key frame="352" value="0" /><Key frame="359" value="0" /><Key frame="365" value="0" /><Key frame="371" value="0" /><Key frame="378" value="0" /><Key frame="384" value="0" /><Key frame="392" value="0" /><Key frame="398" value="0" /><Key frame="404" value="0" /><Key frame="410" value="0" /><Key frame="417" value="0" /><Key frame="424" value="0" /><Key frame="430" value="0" /><Key frame="436" value="0" /><Key frame="443" value="0" /><Key frame="449" value="0" /><Key frame="457" value="0" /><Key frame="463" value="0" /><Key frame="469" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1"><Key frame="20" value="6.23038" /><Key frame="27" value="6.23038" /><Key frame="34" value="6.23038" /><Key frame="40" value="6.23038" /><Key frame="46" value="6.23038" /><Key frame="53" value="6.23038" /><Key frame="59" value="6.23038" /><Key frame="67" value="6.23038" /><Key frame="73" value="6.23038" /><Key frame="79" value="6.23038" /><Key frame="85" value="6.23038" /><Key frame="92" value="6.23038" /><Key frame="99" value="6.23038" /><Key frame="105" value="6.23038" /><Key frame="111" value="6.23038" /><Key frame="118" value="6.23038" /><Key frame="124" value="6.23038" /><Key frame="132" value="6.23038" /><Key frame="138" value="6.23038" /><Key frame="144" value="6.23038" /><Key frame="150" value="6.23038" /><Key frame="157" value="6.23038" /><Key frame="164" value="6.23038" /><Key frame="170" value="6.23038" /><Key frame="176" value="6.23038" /><Key frame="183" value="6.23038" /><Key frame="189" value="6.23038" /><Key frame="197" value="6.23038" /><Key frame="203" value="6.23038" /><Key frame="209" value="6.23038" /><Key frame="215" value="6.23038" /><Key frame="222" value="6.23038" /><Key frame="229" value="6.23038" /><Key frame="235" value="6.23038" /><Key frame="241" value="6.23038" /><Key frame="248" value="6.23038" /><Key frame="254" value="6.23038" /><Key frame="262" value="6.23038" /><Key frame="268" value="6.23038" /><Key frame="274" value="6.23038" /><Key frame="280" value="6.23038" /><Key frame="287" value="6.23038" /><Key frame="294" value="6.23038" /><Key frame="300" value="6.23038" /><Key frame="306" value="6.23038" /><Key frame="313" value="6.23038" /><Key frame="319" value="6.23038" /><Key frame="327" value="6.23038" /><Key frame="333" value="6.23038" /><Key frame="339" value="6.23038" /><Key frame="345" value="6.23038" /><Key frame="352" value="6.23038" /><Key frame="359" value="6.23038" /><Key frame="365" value="6.23038" /><Key frame="371" value="6.23038" /><Key frame="378" value="6.23038" /><Key frame="384" value="6.23038" /><Key frame="392" value="6.23038" /><Key frame="398" value="6.23038" /><Key frame="404" value="6.23038" /><Key frame="410" value="6.23038" /><Key frame="417" value="6.23038" /><Key frame="424" value="6.23038" /><Key frame="430" value="6.23038" /><Key frame="436" value="6.23038" /><Key frame="443" value="6.23038" /><Key frame="449" value="6.23038" /><Key frame="457" value="6.23038" /><Key frame="463" value="6.23038" /><Key frame="469" value="6.23038" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1"><Key frame="20" value="-2.10823" /><Key frame="27" value="-2.10823" /><Key frame="34" value="-2.10823" /><Key frame="40" value="-2.10823" /><Key frame="46" value="-2.10823" /><Key frame="53" value="-2.10823" /><Key frame="59" value="-2.10823" /><Key frame="67" value="-2.10823" /><Key frame="73" value="-2.10823" /><Key frame="79" value="-2.10823" /><Key frame="85" value="-2.10823" /><Key frame="92" value="-2.10823" /><Key frame="99" value="-2.10823" /><Key frame="105" value="-2.10823" /><Key frame="111" value="-2.10823" /><Key frame="118" value="-2.10823" /><Key frame="124" value="-2.10823" /><Key frame="132" value="-2.10823" /><Key frame="138" value="-2.10823" /><Key frame="144" value="-2.10823" /><Key frame="150" value="-2.10823" /><Key frame="157" value="-2.10823" /><Key frame="164" value="-2.10823" /><Key frame="170" value="-2.10823" /><Key frame="176" value="-2.10823" /><Key frame="183" value="-2.10823" /><Key frame="189" value="-2.10823" /><Key frame="197" value="-2.10823" /><Key frame="203" value="-2.10823" /><Key frame="209" value="-2.10823" /><Key frame="215" value="-2.10823" /><Key frame="222" value="-2.10823" /><Key frame="229" value="-2.10823" /><Key frame="235" value="-2.10823" /><Key frame="241" value="-2.10823" /><Key frame="248" value="-2.10823" /><Key frame="254" value="-2.10823" /><Key frame="262" value="-2.10823" /><Key frame="268" value="-2.10823" /><Key frame="274" value="-2.10823" /><Key frame="280" value="-2.10823" /><Key frame="287" value="-2.10823" /><Key frame="294" value="-2.10823" /><Key frame="300" value="-2.10823" /><Key frame="306" value="-2.10823" /><Key frame="313" value="-2.10823" /><Key frame="319" value="-2.10823" /><Key frame="327" value="-2.10823" /><Key frame="333" value="-2.10823" /><Key frame="339" value="-2.10823" /><Key frame="345" value="-2.10823" /><Key frame="352" value="-2.10823" /><Key frame="359" value="-2.10823" /><Key frame="365" value="-2.10823" /><Key frame="371" value="-2.10823" /><Key frame="378" value="-2.10823" /><Key frame="384" value="-2.10823" /><Key frame="392" value="-2.10823" /><Key frame="398" value="-2.10823" /><Key frame="404" value="-2.10823" /><Key frame="410" value="-2.10823" /><Key frame="417" value="-2.10823" /><Key frame="424" value="-2.10823" /><Key frame="430" value="-2.10823" /><Key frame="436" value="-2.10823" /><Key frame="443" value="-2.10823" /><Key frame="449" value="-2.10823" /><Key frame="457" value="-2.10823" /><Key frame="463" value="-2.10823" /><Key frame="469" value="-2.10823" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1"><Key frame="20" value="-8.96379" /><Key frame="27" value="-8.96379" /><Key frame="34" value="-8.96379" /><Key frame="40" value="-8.96379" /><Key frame="46" value="-8.96379" /><Key frame="53" value="-8.96379" /><Key frame="59" value="-8.96379" /><Key frame="67" value="-8.96379" /><Key frame="73" value="-8.96379" /><Key frame="79" value="-8.96379" /><Key frame="85" value="-8.96379" /><Key frame="92" value="-8.96379" /><Key frame="99" value="-8.96379" /><Key frame="105" value="-8.96379" /><Key frame="111" value="-8.96379" /><Key frame="118" value="-8.96379" /><Key frame="124" value="-8.96379" /><Key frame="132" value="-8.96379" /><Key frame="138" value="-8.96379" /><Key frame="144" value="-8.96379" /><Key frame="150" value="-8.96379" /><Key frame="157" value="-8.96379" /><Key frame="164" value="-8.96379" /><Key frame="170" value="-8.96379" /><Key frame="176" value="-8.96379" /><Key frame="183" value="-8.96379" /><Key frame="189" value="-8.96379" /><Key frame="197" value="-8.96379" /><Key frame="203" value="-8.96379" /><Key frame="209" value="-8.96379" /><Key frame="215" value="-8.96379" /><Key frame="222" value="-8.96379" /><Key frame="229" value="-8.96379" /><Key frame="235" value="-8.96379" /><Key frame="241" value="-8.96379" /><Key frame="248" value="-8.96379" /><Key frame="254" value="-8.96379" /><Key frame="262" value="-8.96379" /><Key frame="268" value="-8.96379" /><Key frame="274" value="-8.96379" /><Key frame="280" value="-8.96379" /><Key frame="287" value="-8.96379" /><Key frame="294" value="-8.96379" /><Key frame="300" value="-8.96379" /><Key frame="306" value="-8.96379" /><Key frame="313" value="-8.96379" /><Key frame="319" value="-8.96379" /><Key frame="327" value="-8.96379" /><Key frame="333" value="-8.96379" /><Key frame="339" value="-8.96379" /><Key frame="345" value="-8.96379" /><Key frame="352" value="-8.96379" /><Key frame="359" value="-8.96379" /><Key frame="365" value="-8.96379" /><Key frame="371" value="-8.96379" /><Key frame="378" value="-8.96379" /><Key frame="384" value="-8.96379" /><Key frame="392" value="-8.96379" /><Key frame="398" value="-8.96379" /><Key frame="404" value="-8.96379" /><Key frame="410" value="-8.96379" /><Key frame="417" value="-8.96379" /><Key frame="424" value="-8.96379" /><Key frame="430" value="-8.96379" /><Key frame="436" value="-8.96379" /><Key frame="443" value="-8.96379" /><Key frame="449" value="-8.96379" /><Key frame="457" value="-8.96379" /><Key frame="463" value="-8.96379" /><Key frame="469" value="-8.96379" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1"><Key frame="20" value="25.6611" /><Key frame="27" value="25.6611" /><Key frame="34" value="25.6611" /><Key frame="40" value="25.6611" /><Key frame="46" value="25.6611" /><Key frame="53" value="25.6611" /><Key frame="59" value="25.6611" /><Key frame="67" value="25.6611" /><Key frame="73" value="25.6611" /><Key frame="79" value="25.6611" /><Key frame="85" value="25.6611" /><Key frame="92" value="25.6611" /><Key frame="99" value="25.6611" /><Key frame="105" value="25.6611" /><Key frame="111" value="25.6611" /><Key frame="118" value="25.6611" /><Key frame="124" value="25.6611" /><Key frame="132" value="25.6611" /><Key frame="138" value="25.6611" /><Key frame="144" value="25.6611" /><Key frame="150" value="25.6611" /><Key frame="157" value="25.6611" /><Key frame="164" value="25.6611" /><Key frame="170" value="25.6611" /><Key frame="176" value="25.6611" /><Key frame="183" value="25.6611" /><Key frame="189" value="25.6611" /><Key frame="197" value="25.6611" /><Key frame="203" value="25.6611" /><Key frame="209" value="25.6611" /><Key frame="215" value="25.6611" /><Key frame="222" value="25.6611" /><Key frame="229" value="25.6611" /><Key frame="235" value="25.6611" /><Key frame="241" value="25.6611" /><Key frame="248" value="25.6611" /><Key frame="254" value="25.6611" /><Key frame="262" value="25.6611" /><Key frame="268" value="25.6611" /><Key frame="274" value="25.6611" /><Key frame="280" value="25.6611" /><Key frame="287" value="25.6611" /><Key frame="294" value="25.6611" /><Key frame="300" value="25.6611" /><Key frame="306" value="25.6611" /><Key frame="313" value="25.6611" /><Key frame="319" value="25.6611" /><Key frame="327" value="25.6611" /><Key frame="333" value="25.6611" /><Key frame="339" value="25.6611" /><Key frame="345" value="25.6611" /><Key frame="352" value="25.6611" /><Key frame="359" value="25.6611" /><Key frame="365" value="25.6611" /><Key frame="371" value="25.6611" /><Key frame="378" value="25.6611" /><Key frame="384" value="25.6611" /><Key frame="392" value="25.6611" /><Key frame="398" value="25.6611" /><Key frame="404" value="25.6611" /><Key frame="410" value="25.6611" /><Key frame="417" value="25.6611" /><Key frame="424" value="25.6611" /><Key frame="430" value="25.6611" /><Key frame="436" value="25.6611" /><Key frame="443" value="25.6611" /><Key frame="449" value="25.6611" /><Key frame="457" value="25.6611" /><Key frame="463" value="25.6611" /><Key frame="469" value="25.6611" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1"><Key frame="20" value="0" /><Key frame="27" value="0" /><Key frame="34" value="0" /><Key frame="40" value="0" /><Key frame="46" value="0" /><Key frame="53" value="0" /><Key frame="59" value="0" /><Key frame="67" value="0" /><Key frame="73" value="0" /><Key frame="79" value="0" /><Key frame="85" value="0" /><Key frame="92" value="0" /><Key frame="99" value="0" /><Key frame="105" value="0" /><Key frame="111" value="0" /><Key frame="118" value="0" /><Key frame="124" value="0" /><Key frame="132" value="0" /><Key frame="138" value="0" /><Key frame="144" value="0" /><Key frame="150" value="0" /><Key frame="157" value="0" /><Key frame="164" value="0" /><Key frame="170" value="0" /><Key frame="176" value="0" /><Key frame="183" value="0" /><Key frame="189" value="0" /><Key frame="197" value="0" /><Key frame="203" value="0" /><Key frame="209" value="0" /><Key frame="215" value="0" /><Key frame="222" value="0" /><Key frame="229" value="0" /><Key frame="235" value="0" /><Key frame="241" value="0" /><Key frame="248" value="0" /><Key frame="254" value="0" /><Key frame="262" value="0" /><Key frame="268" value="0" /><Key frame="274" value="0" /><Key frame="280" value="0" /><Key frame="287" value="0" /><Key frame="294" value="0" /><Key frame="300" value="0" /><Key frame="306" value="0" /><Key frame="313" value="0" /><Key frame="319" value="0" /><Key frame="327" value="0" /><Key frame="333" value="0" /><Key frame="339" value="0" /><Key frame="345" value="0" /><Key frame="352" value="0" /><Key frame="359" value="0" /><Key frame="365" value="0" /><Key frame="371" value="0" /><Key frame="378" value="0" /><Key frame="384" value="0" /><Key frame="392" value="0" /><Key frame="398" value="0" /><Key frame="404" value="0" /><Key frame="410" value="0" /><Key frame="417" value="0" /><Key frame="424" value="0" /><Key frame="430" value="0" /><Key frame="436" value="0" /><Key frame="443" value="0" /><Key frame="449" value="0" /><Key frame="457" value="0" /><Key frame="463" value="0" /><Key frame="469" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1"><Key frame="20" value="0.701577" /><Key frame="27" value="0.701577" /><Key frame="34" value="0.701577" /><Key frame="40" value="0.701577" /><Key frame="46" value="0.701577" /><Key frame="53" value="0.701577" /><Key frame="59" value="0.701577" /><Key frame="67" value="0.701577" /><Key frame="73" value="0.701577" /><Key frame="79" value="0.701577" /><Key frame="85" value="0.701577" /><Key frame="92" value="0.701577" /><Key frame="99" value="0.701577" /><Key frame="105" value="0.701577" /><Key frame="111" value="0.701577" /><Key frame="118" value="0.701577" /><Key frame="124" value="0.701577" /><Key frame="132" value="0.701577" /><Key frame="138" value="0.701577" /><Key frame="144" value="0.701577" /><Key frame="150" value="0.701577" /><Key frame="157" value="0.701577" /><Key frame="164" value="0.701577" /><Key frame="170" value="0.701577" /><Key frame="176" value="0.701577" /><Key frame="183" value="0.701577" /><Key frame="189" value="0.701577" /><Key frame="197" value="0.701577" /><Key frame="203" value="0.701577" /><Key frame="209" value="0.701577" /><Key frame="215" value="0.701577" /><Key frame="222" value="0.701577" /><Key frame="229" value="0.701577" /><Key frame="235" value="0.701577" /><Key frame="241" value="0.701577" /><Key frame="248" value="0.701577" /><Key frame="254" value="0.701577" /><Key frame="262" value="0.701577" /><Key frame="268" value="0.701577" /><Key frame="274" value="0.701577" /><Key frame="280" value="0.701577" /><Key frame="287" value="0.701577" /><Key frame="294" value="0.701577" /><Key frame="300" value="0.701577" /><Key frame="306" value="0.701577" /><Key frame="313" value="0.701577" /><Key frame="319" value="0.701577" /><Key frame="327" value="0.701577" /><Key frame="333" value="0.701577" /><Key frame="339" value="0.701577" /><Key frame="345" value="0.701577" /><Key frame="352" value="0.701577" /><Key frame="359" value="0.701577" /><Key frame="365" value="0.701577" /><Key frame="371" value="0.701577" /><Key frame="378" value="0.701577" /><Key frame="384" value="0.701577" /><Key frame="392" value="0.701577" /><Key frame="398" value="0.701577" /><Key frame="404" value="0.701577" /><Key frame="410" value="0.701577" /><Key frame="417" value="0.701577" /><Key frame="424" value="0.701577" /><Key frame="430" value="0.701577" /><Key frame="436" value="0.701577" /><Key frame="443" value="0.701577" /><Key frame="449" value="0.701577" /><Key frame="457" value="0.701577" /><Key frame="463" value="0.701577" /><Key frame="469" value="0.701577" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1"><Key frame="20" value="5.97891" /><Key frame="27" value="5.97891" /><Key frame="34" value="5.97891" /><Key frame="40" value="5.97891" /><Key frame="46" value="5.97891" /><Key frame="53" value="5.97891" /><Key frame="59" value="5.97891" /><Key frame="67" value="5.97891" /><Key frame="73" value="5.97891" /><Key frame="79" value="5.97891" /><Key frame="85" value="5.97891" /><Key frame="92" value="5.97891" /><Key frame="99" value="5.97891" /><Key frame="105" value="5.97891" /><Key frame="111" value="5.97891" /><Key frame="118" value="5.97891" /><Key frame="124" value="5.97891" /><Key frame="132" value="5.97891" /><Key frame="138" value="5.97891" /><Key frame="144" value="5.97891" /><Key frame="150" value="5.97891" /><Key frame="157" value="5.97891" /><Key frame="164" value="5.97891" /><Key frame="170" value="5.97891" /><Key frame="176" value="5.97891" /><Key frame="183" value="5.97891" /><Key frame="189" value="5.97891" /><Key frame="197" value="5.97891" /><Key frame="203" value="5.97891" /><Key frame="209" value="5.97891" /><Key frame="215" value="5.97891" /><Key frame="222" value="5.97891" /><Key frame="229" value="5.97891" /><Key frame="235" value="5.97891" /><Key frame="241" value="5.97891" /><Key frame="248" value="5.97891" /><Key frame="254" value="5.97891" /><Key frame="262" value="5.97891" /><Key frame="268" value="5.97891" /><Key frame="274" value="5.97891" /><Key frame="280" value="5.97891" /><Key frame="287" value="5.97891" /><Key frame="294" value="5.97891" /><Key frame="300" value="5.97891" /><Key frame="306" value="5.97891" /><Key frame="313" value="5.97891" /><Key frame="319" value="5.97891" /><Key frame="327" value="5.97891" /><Key frame="333" value="5.97891" /><Key frame="339" value="5.97891" /><Key frame="345" value="5.97891" /><Key frame="352" value="5.97891" /><Key frame="359" value="5.97891" /><Key frame="365" value="5.97891" /><Key frame="371" value="5.97891" /><Key frame="378" value="5.97891" /><Key frame="384" value="5.97891" /><Key frame="392" value="5.97891" /><Key frame="398" value="5.97891" /><Key frame="404" value="5.97891" /><Key frame="410" value="5.97891" /><Key frame="417" value="5.97891" /><Key frame="424" value="5.97891" /><Key frame="430" value="5.97891" /><Key frame="436" value="5.97891" /><Key frame="443" value="5.97891" /><Key frame="449" value="5.97891" /><Key frame="457" value="5.97891" /><Key frame="463" value="5.97891" /><Key frame="469" value="5.97891" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Timespleep Start Head Scratch" id="15" localization="8" tooltip="" x="1151" y="775"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        time.sleep(2)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Record Sound After Suggested Movie" id="13" localization="8" tooltip='Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head microphones) in wav format.&#x0A;&#x0A;If &quot;Temporary storage&quot; isn&apos;t checked, the output sound file is located in &quot;~/recordings/microphones/&lt;File name&gt;&quot;.&#x0A;Else, it is located in a temporary directory&#x0A;&#x0A;The onStopped output is stimulated at the end of the recording and contains the absolute path to the output sound file&#x0A;&#x0A;V1.1.0&#x0A;' x="2227" y="920"><bitmap>media/images/box/interaction/rec_sound.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="3" value="recording_suggestion" default_value="recording" custom_choice="0" tooltip="Name of the destination file without its extension." id="5" /><Parameter name="Microphones used" inherits_from_parent="0" content_type="3" value="Front head microphone only (.ogg)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="6"><Choice value="Front head microphone only (.ogg)" /><Choice value="Front, sides and rear head microphones (.wav)" /></Parameter><Parameter name="Temporary storage" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is disabled the file is stored in ~/recordings/microphones. You can&#x0A;then get it on your computer using the menu Connection/File transfer.&#x0A;&#x0A;When this option is enabled the file is stored in the temporary folder of the behavior." id="7" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="5" min="0.1" max="60" tooltip="Duration of the recording in seconds." id="8" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Rec. Sound File" id="4" localization="8" tooltip="Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head&#x0A;microphones) in wav format." x="562" y="100"><bitmap>media/images/box/interaction/rec_sound.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.ad = ALProxy("ALAudioDevice")
        except Exception as e:
            self.ad = None
            self.logger.error(e)
        self.filepath = ""

    def onLoad(self):
        self.bIsRecording = False
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False
        if( self.bIsRecording ):
            self.ad.stopMicrophonesRecording()
            self.bIsRecording = False

    def onInput_onStart(self, array):
        if(self.bIsRunning):
            return
        self.bIsRunning = True
        sExtension = self.toExtension( self.getParameter("Microphones used") )
        self.filepath = array[1] + sExtension
        if self.ad:
            self.ad.startMicrophonesRecording( self.filepath )
            self.bIsRecording = True
        else:
            self.logger.warning("No sound recorded")
        time.sleep(10)
        self.onUnload()
        self.onStopped([array[0],self.filepath])

    def toExtension(self, sMicrophones):
        if( sMicrophones == "Front head microphone only (.ogg)" ):
            return ".ogg"
        else:
            return ".wav"]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Launches the recording of the sound. The data received on this input must be the&#x0A;filename of the sound." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the recording of the sound." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Returns the absolute path of the output sound file at the end of the recording" id="4" /><Parameter name="Microphones used" inherits_from_parent="1" content_type="3" value="Front, sides and rear head microphones (.wav)" default_value="Front, sides and rear head microphones (.wav)" custom_choice="0" tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format." id="5"><Choice value="Front head microphone only (.ogg)" /><Choice value="Front, sides and rear head microphones (.wav)" /></Parameter></Box><Box name="Get File Name" id="10" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="234" y="95"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[import os
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self, array):
        if( self.getParameter("Temporary storage") ):
            import tempfile
            path = tempfile.mkdtemp() + "/"
        else:
            path = os.path.expanduser('~') + "/recordings/microphones/"
        self.onStopped( [array[0],path + self.getParameter("File name")] )]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="3" value="recording" default_value="" custom_choice="0" tooltip="Name of the file." id="4" /><Parameter name="Temporary storage" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is enabled the file is stored in ~/.cache/currentChoregrapheBehavior&#x0A;or in ~/.cache/&lt;project_name&gt; when you play the behavior from the&#x0A;behavior manager.&#x0A;&#x0A;When it is disabled the file is stored in ~/recordedSounds. You can&#x0A;then get it on your computer using the menu Connection/File transfer." id="5" /></Box><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Audio recorder" type="Lock" timeout="0" /></Box><Box name="Control Microphone" id="17" localization="8" tooltip="" x="2378" y="914"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.memory = ALProxy("ALMemory")
        except Exception as e:
            self.logger.error(e)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, array):
        try:
            print(array[0])
            a=self.memory.getData(array[0])
            self.logger.info(a)
            self.memory.removeData(array[0])
            self.use_button(a)
        except Exception as e:
            self.use_microphone(array[1])

        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="use_microphone" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="use_button" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /></Box><Box name="Hide Web View" id="16" localization="8" tooltip="Hides the webview (html content) on the tablet, behind a generic cover&#x0A;&#x0A;V1.0.0&#x0A;" x="2299" y="1083"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            tabletService.hideWebview()
            tabletService.resetTablet()
        else:
            self.logger.warning("ALTabletService not found.")
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Hide Web View" id="19" localization="8" tooltip="Hides the webview (html content) on the tablet, behind a generic cover&#x0A;&#x0A;V1.0.0&#x0A;" x="2307" y="1188"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            tabletService.hideWebview()
        else:
            self.logger.warning("ALTabletService not found.")
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Timespleep End Head Scratch" id="20" localization="8" tooltip="" x="1162" y="878"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        time.sleep(2)
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="SignUp" id="21" localization="8" tooltip="" x="1079" y="25"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")
        self.tts = ALProxy('ALTextToSpeech')
        try:
            self.framemanager = ALProxy("ALFrameManager")
        except:
            self.logger.warn("ALFrameManager is not available")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, text):
        import login_signup

        pars=text.split("&")
        print(pars)
        r = login_signup.login_signup(pars[0], pars[1], pars[2])

        self.tts.say("\\rspd=80\\"+str("Hello "+str(pars[0])))

        self.output_1(str(r))



    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="output_1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Show App SignUp" id="22" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="948" y="21"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            self.memory = ALProxy("ALMemory")
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self, id):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = ".lastUploadedChoregrapheBehavior"
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True
                    def callback(x,y):
                        time.sleep(2)
                        try:
                            if self.isRunning:
                                a=self.memory.getData(id)
                                self.logger.info(a)
                                self.memory.removeData(id)
                                tabletService.hideWebview()
                                self.onUnload()
                                self.onSuccess(a)
                            else:
                                self.logger.info('Close')

                        except Exception as e:
                            self.logger.info('Null value!')

                    # attach the callback function to onJSEvent signal
                    tabletService.onTouchDown.connect(callback)

                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            print('Success')
        else:
            self.onFailure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Box name="Face Reco." id="23" localization="8" tooltip="Detect people&apos;s face and recognize those which are known by the robot.&#x0A;&#x0A;Note: the robot needs to learn a face with the Learn Face box before he can recognize it." x="834" y="215"><bitmap>media/images/box/interaction/reco_face.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self,p):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="3" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="FaceDetected" type="0" type_size="1" nature="4" stm_value_name="FaceDetected" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" /><Output name="onRecognizedFaces" type="3" type_size="1" nature="2" inner="0" tooltip="Names of recognized faces. If several faces are recognized, they are sent one&#x0A;after an other on this output." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Reco. Det. Faces" id="1" localization="8" tooltip="Process face detection extractor data (FaceDetected) to extract the labels of&#x0A;recognized faces and notify when there is a face detected but not recognized.&#x0A;&#x0A;An output (either one or the other) is stimulated each time the number of&#x0A;recognized faces change." x="183" y="68"><bitmap>media/images/box/interaction/reco_face.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.faceDetection = ALProxy("ALFaceDetection")

    def onLoad(self):
        self.timeFilteredResult = [];

    def onUnload(self):
        #puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        t=self.faceDetection.getRecognitionConfidenceThreshold()
        self.faceDetection.setRecognitionConfidenceThreshold(0.4)
        t=self.faceDetection.getRecognitionConfidenceThreshold()
        print(t)
        if(len(p) > 0):
            if(len(p[1]) > 0): # just in case of the ALValue is in the wrong format
                # get the ALValue returned by the time filtered recognition:
                #    - [] when nothing new.
                #    - [4] when a face has been detected but not recognized during the first 8s.
                #    - [2, [faceName]] when one face has been recognized.
                #    - [3, [faceName1, faceName2, ...]] when several faces have been recognized.
                self.timeFilteredResult = p[1][len(p[1]) -1]
                if( len(self.timeFilteredResult) == 1 ):
                    # If a face has been detected for more than 8s but not recognized
                    if(self.timeFilteredResult[0] == 4):
                        self.onDetectWithoutReco()
                elif( len(self.timeFilteredResult) == 2 ):
                    # If one or several faces have been recognized
                    if(self.timeFilteredResult[0] in [2, 3]):
                            s = self.timeFilteredResult[1][0]
                            self.onRecognizedFace( s )

    def onInput_onStop(self):
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input. It must be the&#x0A;FaceDetected extractor data." id="2" /><Output name="onRecognizedFace" type="3" type_size="1" nature="1" inner="0" tooltip="Name of recognized face. If several faces are recognized, they are sent one after an&#x0A;other on this output.&#x0A;&#x0A;Note: if it is the wrong face which has been recognized, you have 7s to rename&#x0A;it with the relearn function available on one of  Add/Del Faces sub-boxes (Learn Face&#x0A;box)." id="3" /><Output name="onDetectWithoutReco" type="1" type_size="1" nature="1" inner="0" tooltip="A face has been detected for more than 8s but has not been recognized. It means&#x0A;that the robot does not know this face but it would be a good idea to learn it." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Create Login Or SignUp" id="26" localization="8" tooltip="" x="314" y="114"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        from modules.generate_html import html_login_or_signup

        fileName = os.path.join(self.behaviorAbsolutePath(), '../')
        fileName = fileName+'html/index.html'

        say, id = html_login_or_signup(fileName)

        # set the local configuration
        configuration = {"bodyLanguageMode":"contextual"}

        # say the text with the local configuration
        self.animatedSpeechProxy.say('\\rspd=80\\'+str(say), configuration)

        self.onStopped(id)

        #self.onStopped('/start') #activate the output of the box
        #self.onStopped("I like Matrix.")             #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Show App Login or SignUp" id="27" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="437" y="118"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            self.memory = ALProxy("ALMemory")
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self, id):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        #appName = "movierecsys-0fb8f5"
        appName = ".lastUploadedChoregrapheBehavior"
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True

                    def callback(x,y):
                        time.sleep(2)
                        try:
                            if self.isRunning:
                                a=self.memory.getData(id)
                                self.logger.info(a)
                                self.memory.removeData(id)
                                tabletService.hideWebview()
                                self.onUnload()
                                self.onSuccess(a)
                            else:
                                self.logger.info('Close')

                        except Exception as e:
                            self.logger.info('Null value!')

                    # attach the callback function to onJSEvent signal
                    tabletService.onTouchDown.connect(callback)

                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            print('Success')
        else:
            self.onFailure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Box name="Insert User" id="25" localization="8" tooltip="" x="1337" y="24"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        print(p)
        self.memory.insertData("movierecsys_user_id",p)
        self.onStopped('/start') #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Learn Face" id="24" localization="8" tooltip="Teach the robot a new face to recognize. the robot&apos;s eyes will become green in case of&#x0A;success and red in case of failure.&#x0A;&#x0A;V1.1.0&#x0A;" x="1206" y="25"><bitmap>media/images/box/interaction/learn_face.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onLearn" type="3" type_size="1" nature="2" inner="0" tooltip="Name of the face you want to learn.&#x0A;&#x0A;After entering the name of the face, you have 5s to place in front of the robot&apos;s face.&#x0A;Then the learning process is launched and the robot&apos;s eyes get blue. After some&#x0A;seconds, his eyes should turn green (success) or red (failure).&#x0A;&#x0A;Note: You can learn several times the same face on different days and/or&#x0A;conditions to robustify the recognition process." id="2" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the learning succeeded." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the learning failed." id="4" /><Output name="output_1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Learn Face" id="2" localization="8" tooltip="Learn a face to recognize it later.&#x0A;&#x0A;Note: You need to be just in front of the robot&apos;s face to teach him your face." x="624" y="60"><bitmap>media/images/box/interaction/face.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.faceDetectionModule = ALProxy("ALFaceDetection")
        except Exception as e:
            self.faceDetectionModule = None
            self.logger.error(e)


    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onLearn(self, p):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        if( self.faceDetectionModule and self.faceDetectionModule.learnFace( p ) ):
            self.onSuccess()
            self.output_1(p)
        else:
            self.onFailure()
        self.bIsRunning = False

    def onInput_onReLearn(self, p):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        if( self.faceDetectionModule and self.faceDetectionModule.reLearnFace( p ) ):
            self.onSuccess()
            self.output_1(p)
        else:
            self.onFailure()
        self.bIsRunning = False]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onLearn" type="3" type_size="1" nature="2" inner="0" tooltip="Name of the face you want to learn." id="2" /><Input name="onReLearn" type="3" type_size="1" nature="2" inner="0" tooltip="Name of the face you want to relearn. Stimulating this input enables to use in a&#x0A;new learning process the latest images where a face has been wrongly&#x0A;recognized." id="3" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the operation succeeded. The face has been learnt." id="4" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent if the operation failed. The face has not been learnt." id="5" /><Output name="output_1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /></Box><Box name="WaitToSendMsg" id="8" localization="8" tooltip="Wait for both inputs to be stimulated before sending the message." x="464" y="32"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok1 = None
        self.ok2 = False

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onMessage(self, p):
        if( not self.ok2 ):
            self.ok1 = p
        else:
            self.ok( p )

    def onInput_onSignal(self):
        if( self.ok1 == None ):
            self.ok2 = True
        else:
            self.ok( self.ok1 )

    def ok(self, p):
        self.ok1 = None
        self.ok2 = False
        self.onStopped( p )]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onMessage" type="0" type_size="1" nature="2" inner="0" tooltip="First signal to wait. This signal contains the message to transmit." id="2" /><Input name="onSignal" type="1" type_size="1" nature="2" inner="0" tooltip="Second signal to wait." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Message sent when both inputs are stimulated." id="4" /></Box><Box name="Only Once" id="9" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is." x="71" y="37"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self, p):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime(p)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSignal" type="0" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" /><Output name="firstTime" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" /></Box><Box name="Eyes LEDs" id="5" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes. Note that you must enter the box to enter the color." x="776" y="12"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4"><Choice value="Both" /><Choice value="Left" /><Choice value="Right" /></Parameter><Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.01" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = self.leds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4"><Choice value="Both" /><Choice value="Left" /><Choice value="Right" /></Parameter><Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" /></Box><Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 255, 0])]]></content></script><pluginContent><color>#00ff00</color></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" /><Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" /></Box><Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" /><Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Eyes LEDs" id="6" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes. Note that you must enter the box to enter the color." x="776" y="114"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4"><Choice value="Both" /><Choice value="Left" /><Choice value="Right" /></Parameter><Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.01" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = self.leds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4"><Choice value="Both" /><Choice value="Left" /><Choice value="Right" /></Parameter><Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" /></Box><Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 0, 0])]]></content></script><pluginContent><color>#ff0000</color></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" /><Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" /></Box><Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" /><Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Eyes LEDs" id="1" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes. Note that you must enter the box to enter the color." x="330" y="122"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4"><Choice value="Both" /><Choice value="Left" /><Choice value="Right" /></Parameter><Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.01" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = self.leds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" /><Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4"><Choice value="Both" /><Choice value="Left" /><Choice value="Right" /></Parameter><Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" /></Box><Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 170, 255])]]></content></script><pluginContent><color>#00aaff</color></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" /><Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" /></Box><Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" /><Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Wait" id="3" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="200" y="95"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="3" /><Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="5" /><Link inputowner="0" indexofinput="3" outputowner="5" indexofoutput="3" /><Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="3" /><Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" /><Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="8" indexofinput="3" outputowner="3" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Switch Case Login Signin" id="30" localization="8" tooltip="" x="599" y="102"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onInput_onStart(self, p):
        p = self.typeConversion(p)
        if(p == self.typeConversion("signup")):
            self.output_1()
        elif(p == self.typeConversion("login")):
            self.output_2()
        else:
            self.onDefault()

    def typeConversion(self, p):
        try:
            p = float(p)
            pint = int(p)
            if( p == pint ):
                p = pint
        except:
            p = str(p)
        return p]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="output_1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="output_2" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /></Box><Box name="Insert User Login" id="31" localization="8" tooltip="" x="1010" y="211"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        import getUserDetails
        from modules.generate_id import generate_message_id

        try:
            message_id = generate_message_id()
            r = getUserDetails.getUserDetails(p)
            print('***** USER ID *****')
            print(p)

            # set the local configuration
            configuration = {"bodyLanguageMode":"contextual"}

            # say the text with the local configuration
            self.animatedSpeechProxy.say('\\rspd=80\\'+str("Welcome ")+str(r["firstname"])+str("!\nTalk to me about movies, actors and directors."), configuration)

            self.memory.insertData("movierecsys_user_id",p)
            self.onStopped() #activate the output of the box

        except:
            self.animatedSpeechProxy.say("\\rspd=80\\"+str("Sorry, I can't recognize you! Please try again!"))
            self.output_repeat()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="output_repeat" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Say Profile" id="28" localization="8" tooltip="" x="1660" y="1205"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.animatedSpeechProxy = ALProxy("ALAnimatedSpeech")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # set the local configuration
        configuration = {"bodyLanguageMode":"contextual"}

        # say the text with the local configuration
        self.animatedSpeechProxy.say('\\rspd=80\\'+str('Tell me something!'), configuration)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Face Tracker" id="29" localization="-1" tooltip="This box makes the robot track a face with different modes." x="76" y="250"><bitmap>media/images/box/interaction/target_face.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )
        self.memory = ALProxy("ALMemory")
        self.targetName = "Face"
        self.distanceX = 0.0
        self.distanceY = 0.0
        self.angleWz = 0.0
        self.thresholdX = 0.0
        self.thresholdY = 0.0
        self.thresholdWz = 0.0
        self.subscribeDone = False
        self.effector = "None"
        self.isRunning = False

    def onLoad(self):
        self.BIND_PYTHON(self.getName(), "setParameter")
        self.BIND_PYTHON(self.getName(), "onTargetLost")
        self.BIND_PYTHON(self.getName(), "onTargetReached")
        self.BIND_PYTHON(self.getName(), "onTargetChanged")
        self.memory.subscribeToEvent("ALTracker/ActiveTargetChanged", self.getName(), "onTargetChanged")

    def onUnload(self):
        if self.subscribeDone:
            self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False

        if self.isRunning:
            self.tracker.setEffector("None")
            self.tracker.stopTracker()
            self.tracker.unregisterTarget(self.targetName)
            self.isRunning = False

    def onInput_onStart(self):
        self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
        self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
        self.subscribeDone = True

        mode = self.getParameter("Mode")
        width = self.getParameter("Width (m)")
        self.distanceX = self.getParameter("Distance X (m)")
        self.thresholdX = self.getParameter("Threshold X (m)")
        self.distanceY = self.getParameter("Distance Y (m)")
        self.thresholdY = self.getParameter("Threshold Y (m)")
        self.angleWz = self.getParameter("Theta (rad)")
        self.thresholdWz = self.getParameter("Threshold Theta (rad)")
        self.effector = self.getParameter("Effector")

        self.tracker.setEffector(self.effector)

        self.tracker.registerTarget(self.targetName, width)
        self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                           self.thresholdX, self.thresholdY, self.thresholdWz])
        self.tracker.setMode(mode)

        self.tracker.track(self.targetName) #Start tracker
        self.isRunning = True

    def onInput_onStop(self):
        self.onStopped()
        self.onUnload()

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)
        if (parameterName == "Mode"):
            self.tracker.setMode(newValue)
            return

        if (parameterName == "Width (m)"):
            self.tracker.registerTarget(self.targetName, newValue)
            return

        if (parameterName == "Distance X (m)"):
            self.distanceX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Distance Y (m)"):
            self.distanceY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Theta (rad)"):
            self.angleWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold X (m)"):
            self.thresholdX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Y (m)"):
            self.thresholdY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Theta (rad)"):
            self.thresholdWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if(parameterName == "Effector"):
            self.tracker.setEffector(newValue)
            self.effector = newValue
            return

    def onTargetLost(self, key, value, message):
        self.targetLost()

    def onTargetReached(self, key, value, message):
        self.targetReached()

    def onTargetChanged(self, key, value, message):
        if value == self.targetName and not self.subscribeDone:
            self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
            self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
            self.subscribeDone = True
        elif value != self.targetName and self.subscribeDone:
            self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="targetLost" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the target is lost." id="5" /><Output name="targetReached" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the target is reached." id="6" /><Parameter name="Mode" inherits_from_parent="0" content_type="3" value="Move" default_value="Head" custom_choice="0" tooltip="Set tracker mode" id="7"><Choice value="Head" /><Choice value="WholeBody" /><Choice value="Move" /></Parameter><Parameter name="Effector" inherits_from_parent="0" content_type="3" value="None" default_value="None" custom_choice="0" tooltip="Set effector to use for tracking. Head is always used." id="8"><Choice value="None" /><Choice value="Arms" /><Choice value="LArm" /><Choice value="RArm" /></Parameter><Parameter name="Width (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="0.6" tooltip="Width of the face in meters" id="9" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0.01" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="10" /><Parameter name="Threshold X (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="11" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="Distance on Y axis the robot will try to maintain from its target in move modes." id="12" /><Parameter name="Threshold Y (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="13" /><Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="Wz angle of the vector robot-target the robot will try to maintain in move modes." id="14" /><Parameter name="Threshold Theta (rad)" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="3.14" tooltip="Threshold of the angle of the vector robot-target above which the robot will move to track its target in move modes." id="15" /></Box><Box name="Show App Profile" id="32" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="1281" y="1206"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            self.memory = ALProxy("ALMemory")
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self, id):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = ".lastUploadedChoregrapheBehavior"
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True

                    def callback(x,y):
                        time.sleep(2)
                        try:
                            if self.isRunning:
                                print(id)
                                a=self.memory.getData(id)
                                self.logger.info(a)
                                self.memory.removeData(id)
                                self.onUnload()
                                self.wordRecognized()

                            else:
                                self.logger.info('Close')

                        except Exception as e:
                            self.logger.info('Null value!')

                    # attach the callback function to onJSEvent signal
                    tabletService.onTouchDown.connect(callback)


                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            print('Success')
        else:
            self.onFailure(id)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /><Output name="wordRecognized" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Record Video" id="18" localization="8" tooltip="Record a video from one of the cameras. Stop recording when the duration set in parameter is elapsed. Note: By default, the file will be stored on the robot in /home/nao/recordings/cameras.&#x0A;&#x0A;V1.1.0&#x0A;" x="351" y="554"><bitmap>media/images/box/interaction/rec_movie.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="3" value="utente_5" default_value="recording" custom_choice="0" tooltip="Name of the destination file without its extension." id="5" /><Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="9.22849" default_value="10" min="0.01" max="120" tooltip="Duration of the video capture." id="6" /><Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="320 x 240" default_value="320 x 240" custom_choice="0" tooltip="Recording resolution." id="7"><Choice value="160 x 120" /><Choice value="320 x 240" /><Choice value="640 x 480" /></Parameter><Parameter name="Frame rate (frame/s)" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="1" max="30" tooltip="Recording frame rate.&#x0A;&#x0A;!Warning! MJPG format requires framerate greater than 2.0." id="8" /><Parameter name="Format" inherits_from_parent="0" content_type="3" value="MJPG" default_value="MJPG" custom_choice="0" tooltip="Recording format:&#x0A;- IYUV for raw avi.&#x0A;- MJPG for compressed avi." id="9"><Choice value="IYUV" /><Choice value="MJPG" /></Parameter><Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip='Enable to select the camera that will record the video.&#x0A;It is possible to select the Top camera, the Bottom camera or the &quot;Default&quot; camera, which corresponds to the one displayed in the Video monitor and which can be changed with the &quot;Select Camera&quot; box.' id="10"><Choice value="Top" /><Choice value="Bottom" /></Parameter><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Record Video" id="4" localization="8" tooltip="Record a video from one of the cameras. Stop recording when the onStop intput is&#x0A;stimulated.&#x0A;&#x0A;Note: By default, the file will be stored on the robot in /home/nao." x="564" y="10"><bitmap>media/images/box/interaction/rec_movie.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }
        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        #~ puts code for box initialization here
        try:
            self.videoRecorder = ALProxy("ALVideoRecorder")
        except Exception as e:
            self.videoRecorder = None
            self.logger.error(e)


    def onUnload(self):
        #~ puts code for box cleanup here
        if( self.videoRecorder and self.videoRecorder.isRecording() ):
            self.videoRecorder.stopRecording()

    def onInput_onStart(self):
        resolutionValue = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        formatValue = str(self.getParameter("Format"))
        frameRateValue = self.getParameter("Frame rate (frame/s)")
        fileName = self.getParameter("File name")
        if self.videoRecorder:
            self.videoRecorder.setResolution(resolutionValue)
            self.videoRecorder.setCameraID(cameraID)
            self.videoRecorder.setVideoFormat(formatValue)
            self.videoRecorder.setFrameRate(frameRateValue)

            self.videoRecorder.startRecording(self.recordFolder, fileName)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="File name" inherits_from_parent="1" content_type="3" value="recording" default_value="recording" custom_choice="0" tooltip="Name of the destination file without its extension." id="5" /><Parameter name="Resolution" inherits_from_parent="1" content_type="3" value="320 x 240" default_value="320 x 240" custom_choice="0" tooltip="Recording resolution." id="6"><Choice value="160 x 120" /><Choice value="320 x 240" /><Choice value="640 x 480" /></Parameter><Parameter name="Frame rate (frame/s)" inherits_from_parent="1" content_type="1" value="10" default_value="10" min="1" max="30" tooltip="Recording frame rate.&#x0A;&#x0A;!Warning! MJPG format requires framerate greater than 2.0." id="7" /><Parameter name="Format" inherits_from_parent="1" content_type="3" value="MJPG" default_value="MJPG" custom_choice="0" tooltip="Recording format:&#x0A;- ARV for raw YUV422 format.&#x0A;- IYUV for raw avi.&#x0A;- MJPG for compressed avi." id="8"><Choice value="ARV" /><Choice value="IYUV" /><Choice value="MJPG" /></Parameter><Parameter name="Camera" inherits_from_parent="1" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip='Enable to select the camera that will record the video.&#x0A;It is possible to select the Top camera, the Bottom camera or the &quot;Default&quot; camera, which corresponds to the one displayed in the Video monitor and which can be changed with the &quot;Select Camera&quot; box.' id="9"><Choice value="Top" /><Choice value="Bottom" /></Parameter></Box><Box name="Wait" id="5" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="226" y="68"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        time.sleep(900)
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Duration (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="3" outputowner="5" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="5" /><Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="5" /><Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="3" /><Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" /><Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="6" /><Link inputowner="11" indexofinput="2" outputowner="4" indexofoutput="6" /><Link inputowner="14" indexofinput="2" outputowner="4" indexofoutput="7" /><Link inputowner="10" indexofinput="2" outputowner="14" indexofoutput="7" /><Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="8" /><Link inputowner="12" indexofinput="2" outputowner="15" indexofoutput="4" /><Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" /><Link inputowner="17" indexofinput="2" outputowner="13" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="17" indexofoutput="5" /><Link inputowner="16" indexofinput="2" outputowner="3" indexofoutput="6" /><Link inputowner="16" indexofinput="2" outputowner="17" indexofoutput="5" /><Link inputowner="16" indexofinput="2" outputowner="14" indexofoutput="5" /><Link inputowner="19" indexofinput="2" outputowner="14" indexofoutput="7" /><Link inputowner="20" indexofinput="2" outputowner="4" indexofoutput="9" /><Link inputowner="12" indexofinput="3" outputowner="20" indexofoutput="4" /><Link inputowner="22" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="21" indexofinput="2" outputowner="22" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="17" indexofoutput="6" /><Link inputowner="27" indexofinput="2" outputowner="26" indexofoutput="4" /><Link inputowner="26" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="25" indexofoutput="4" /><Link inputowner="24" indexofinput="2" outputowner="21" indexofoutput="5" /><Link inputowner="26" indexofinput="2" outputowner="24" indexofoutput="4" /><Link inputowner="25" indexofinput="2" outputowner="24" indexofoutput="5" /><Link inputowner="30" indexofinput="2" outputowner="27" indexofoutput="3" /><Link inputowner="7" indexofinput="2" outputowner="30" indexofoutput="5" /><Link inputowner="23" indexofinput="2" outputowner="30" indexofoutput="6" /><Link inputowner="23" indexofinput="3" outputowner="23" indexofoutput="6" /><Link inputowner="31" indexofinput="2" outputowner="23" indexofoutput="6" /><Link inputowner="10" indexofinput="2" outputowner="31" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="26" indexofinput="2" outputowner="31" indexofoutput="5" /><Link inputowner="29" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="32" indexofinput="2" outputowner="4" indexofoutput="10" /><Link inputowner="28" indexofinput="2" outputowner="32" indexofoutput="5" /><Link inputowner="19" indexofinput="2" outputowner="32" indexofoutput="5" /><Link inputowner="4" indexofinput="2" outputowner="14" indexofoutput="5" /><Link inputowner="16" indexofinput="2" outputowner="17" indexofoutput="6" /><Link inputowner="3" indexofinput="3" outputowner="3" indexofoutput="6" /><Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="18" indexofinput="3" outputowner="8" indexofoutput="5" /><Link inputowner="10" indexofinput="2" outputowner="28" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>